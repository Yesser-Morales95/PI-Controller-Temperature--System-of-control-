CCS PCM C Compiler, Version 4.084, 27019               04-Dec-16 05:21

               Filename: Project Control PI.lst

               ROM used: 3294 words (80%)
                         Largest free fragment is 750
               RAM used: 94 (26%) at main() level
                         171 (46%) worst case
               Stack:    12 worst case (6 in main + 6 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   3B1
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.5
001F:  GOTO   022
0020:  BTFSC  0C.5
0021:  GOTO   039
0022:  BTFSS  0B.5
0023:  GOTO   026
0024:  BTFSC  0B.2
0025:  GOTO   03B
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  7B
0032:  MOVF   28,W
0033:  MOVWF  0A
0034:  SWAPF  21,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   06F
003B:  BSF    0A.3
003C:  GOTO   000
.................... #include <16f88.h>//pic a utilizar 
.................... //////// Standard Header file for the PIC16F88 device //////////////// 
.................... #device PIC16F88 
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES NOWDT, HS NOPUT,NOBROWNOUT,MCLR, NOLVP, NOCPD, NOPROTECT,INTRC_IO,CCPB0,NOPUT //si pongo CCPB3 
.................... #BYTE OSCCON = 0b01110000 
.................... #use delay (internal=8MHZ) 
*
0082:  MOVLW  D6
0083:  MOVWF  04
0084:  BCF    03.7
0085:  MOVF   00,W
0086:  BTFSC  03.2
0087:  GOTO   095
0088:  MOVLW  02
0089:  MOVWF  78
008A:  CLRF   77
008B:  DECFSZ 77,F
008C:  GOTO   08B
008D:  DECFSZ 78,F
008E:  GOTO   08A
008F:  MOVLW  97
0090:  MOVWF  77
0091:  DECFSZ 77,F
0092:  GOTO   091
0093:  DECFSZ 00,F
0094:  GOTO   088
0095:  RETLW  00
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
*
037F:  BSF    03.5
0380:  MOVF   50,W
0381:  MOVWF  5E
0382:  MOVF   4F,W
0383:  MOVWF  5D
0384:  MOVF   4E,W
0385:  MOVWF  5C
0386:  MOVF   4D,W
0387:  MOVWF  5B
0388:  CLRF   62
0389:  CLRF   61
038A:  CLRF   60
038B:  CLRF   5F
038C:  BCF    03.5
038D:  CALL   33E
038E:  BTFSC  03.0
038F:  GOTO   392
0390:  BTFSS  03.2
0391:  GOTO   397
....................       return(0.0); 
0392:  CLRF   77
0393:  CLRF   78
0394:  CLRF   79
0395:  CLRF   7A
0396:  GOTO   41C
....................  
....................    y=x; 
0397:  BSF    03.5
0398:  MOVF   50,W
0399:  MOVWF  54
039A:  MOVF   4F,W
039B:  MOVWF  53
039C:  MOVF   4E,W
039D:  MOVWF  52
039E:  MOVF   4D,W
039F:  MOVWF  51
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
03A0:  CLRF   5A
03A1:  MOVLW  D1
03A2:  MOVWF  59
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
03A3:  MOVF   59,W
03A4:  MOVWF  04
03A5:  BCF    03.7
03A6:  BTFSC  5A.0
03A7:  BSF    03.7
03A8:  MOVF   00,W
03A9:  CLRF   5E
03AA:  MOVWF  5D
03AB:  MOVLW  7F
03AC:  ADDWF  5D,W
03AD:  MOVWF  5F
03AE:  MOVF   5E,W
03AF:  MOVWF  60
03B0:  BTFSC  03.0
03B1:  INCF   60,F
03B2:  BCF    03.0
03B3:  RRF    60,W
03B4:  MOVWF  7A
03B5:  RRF    5F,W
03B6:  MOVWF  79
03B7:  MOVWF  61
03B8:  MOVF   59,W
03B9:  MOVWF  04
03BA:  BCF    03.7
03BB:  BTFSC  5A.0
03BC:  BSF    03.7
03BD:  MOVF   61,W
03BE:  MOVWF  00
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
03BF:  MOVF   54,W
03C0:  MOVWF  58
03C1:  MOVF   53,W
03C2:  MOVWF  57
03C3:  MOVF   52,W
03C4:  MOVWF  56
03C5:  MOVF   51,W
03C6:  MOVWF  55
....................       y+=(x/y); 
03C7:  MOVF   50,W
03C8:  MOVWF  5E
03C9:  MOVF   4F,W
03CA:  MOVWF  5D
03CB:  MOVF   4E,W
03CC:  MOVWF  5C
03CD:  MOVF   4D,W
03CE:  MOVWF  5B
03CF:  MOVF   54,W
03D0:  MOVWF  62
03D1:  MOVF   53,W
03D2:  MOVWF  61
03D3:  MOVF   52,W
03D4:  MOVWF  60
03D5:  MOVF   51,W
03D6:  MOVWF  5F
03D7:  BCF    03.5
03D8:  CALL   12C
03D9:  BCF    03.1
03DA:  BSF    03.5
03DB:  MOVF   54,W
03DC:  MOVWF  5E
03DD:  MOVF   53,W
03DE:  MOVWF  5D
03DF:  MOVF   52,W
03E0:  MOVWF  5C
03E1:  MOVF   51,W
03E2:  MOVWF  5B
03E3:  MOVF   7A,W
03E4:  MOVWF  62
03E5:  MOVF   79,W
03E6:  MOVWF  61
03E7:  MOVF   78,W
03E8:  MOVWF  60
03E9:  MOVF   77,W
03EA:  MOVWF  5F
03EB:  BCF    03.5
03EC:  CALL   1F8
03ED:  MOVF   7A,W
03EE:  BSF    03.5
03EF:  MOVWF  54
03F0:  MOVF   79,W
03F1:  MOVWF  53
03F2:  MOVF   78,W
03F3:  MOVWF  52
03F4:  MOVF   77,W
03F5:  MOVWF  51
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
03F6:  MOVF   59,W
03F7:  MOVWF  04
03F8:  BCF    03.7
03F9:  BTFSC  5A.0
03FA:  BSF    03.7
03FB:  DECF   00,F
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
03FC:  MOVF   58,W
03FD:  MOVWF  5E
03FE:  MOVF   57,W
03FF:  MOVWF  5D
0400:  MOVF   56,W
0401:  MOVWF  5C
0402:  MOVF   55,W
0403:  MOVWF  5B
0404:  MOVF   54,W
0405:  MOVWF  62
0406:  MOVF   53,W
0407:  MOVWF  61
0408:  MOVF   52,W
0409:  MOVWF  60
040A:  MOVF   51,W
040B:  MOVWF  5F
040C:  BCF    03.5
040D:  CALL   33E
040E:  BTFSC  03.2
040F:  GOTO   412
0410:  BSF    03.5
0411:  GOTO   3BF
....................  
....................    return(res); 
0412:  BSF    03.5
0413:  MOVF   55,W
0414:  MOVWF  77
0415:  MOVF   56,W
0416:  MOVWF  78
0417:  MOVF   57,W
0418:  MOVWF  79
0419:  MOVF   58,W
041A:  MOVWF  7A
041B:  BCF    03.5
.................... } 
041C:  RETLW  00
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "flex_lcd.c"  //Llamada a la libreria lcd.c 
.................... // flex_lcd.c 
....................  
.................... // Change these pins to fit your own board. 
....................  
.................... #define LCD_DB4 PIN_B1 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B6 
.................... #define LCD_DB7 PIN_B7 
....................  
.................... #define LCD_E PIN_A2 
.................... //#define LCD_RW PIN_A3 
.................... #define LCD_RS  PIN_A1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW 1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................   0xc, // Display on 
....................   1, // Clear display 
....................   6 // Increment cursor 
.................... }; 
....................  
....................  
.................... //------------------------------------- 
....................  
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................   // Note: !! converts an integer expression 
....................   // to a boolean (1 or 0). 
....................   output_bit(LCD_DB4, !!(nibble & 1)); 
*
055B:  BSF    03.5
055C:  BTFSC  5D.0
055D:  GOTO   562
055E:  BCF    03.5
055F:  BCF    06.1
0560:  GOTO   564
0561:  BSF    03.5
0562:  BCF    03.5
0563:  BSF    06.1
0564:  BSF    03.5
0565:  BCF    06.1
....................   output_bit(LCD_DB5, !!(nibble & 2)); 
0566:  BTFSC  5D.1
0567:  GOTO   56C
0568:  BCF    03.5
0569:  BCF    06.4
056A:  GOTO   56E
056B:  BSF    03.5
056C:  BCF    03.5
056D:  BSF    06.4
056E:  BSF    03.5
056F:  BCF    06.4
....................   output_bit(LCD_DB6, !!(nibble & 4)); 
0570:  BTFSC  5D.2
0571:  GOTO   576
0572:  BCF    03.5
0573:  BCF    06.6
0574:  GOTO   578
0575:  BSF    03.5
0576:  BCF    03.5
0577:  BSF    06.6
0578:  BSF    03.5
0579:  BCF    06.6
....................   output_bit(LCD_DB7, !!(nibble & 8)); 
057A:  BTFSC  5D.3
057B:  GOTO   580
057C:  BCF    03.5
057D:  BCF    06.7
057E:  GOTO   582
057F:  BSF    03.5
0580:  BCF    03.5
0581:  BSF    06.7
0582:  BSF    03.5
0583:  BCF    06.7
....................  
....................   delay_cycles(1); 
0584:  NOP
....................   output_high(LCD_E); 
0585:  BCF    05.2
0586:  BCF    03.5
0587:  BSF    05.2
....................   delay_cycles(2);// 2us 
0588:  GOTO   589
....................   output_low(LCD_E); 
0589:  BSF    03.5
058A:  BCF    05.2
058B:  BCF    03.5
058C:  BCF    05.2
.................... } 
058D:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine. For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
....................   int8 retval; 
....................   // Create bit variables so that we can easily set 
....................   // individual bits in the retval variable. 
....................   #bit retval_0 = retval.0 
....................   #bit retval_1 = retval.1 
....................   #bit retval_2 = retval.2 
....................   #bit retval_3 = retval.3 
....................  
....................   retval = 0; 
....................  
....................   output_high(LCD_E); 
....................   delay_cycles(1); 
....................  
....................   retval_0 = input(LCD_DB4); 
....................   retval_1 = input(LCD_DB5); 
....................   retval_2 = input(LCD_DB6); 
....................   retval_3 = input(LCD_DB7); 
....................  
....................   output_low(LCD_E); 
....................  
....................   return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
....................   int8 low; 
....................   int8 high; 
....................  
....................   output_high(LCD_RW); 
....................   delay_cycles(1); 
....................  
....................   high = lcd_read_nibble(); 
....................  
....................   low = lcd_read_nibble(); 
....................  
....................   return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
....................   output_low(LCD_RS); 
058E:  BSF    03.5
058F:  BCF    05.1
0590:  BCF    03.5
0591:  BCF    05.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0592:  MOVLW  27
0593:  MOVWF  77
0594:  DECFSZ 77,F
0595:  GOTO   594
0596:  GOTO   597
.................... #endif 
....................  
....................   if(address) 
0597:  BSF    03.5
0598:  MOVF   5A,F
0599:  BTFSC  03.2
059A:  GOTO   5A0
....................   output_high(LCD_RS); 
059B:  BCF    05.1
059C:  BCF    03.5
059D:  BSF    05.1
....................   else 
059E:  GOTO   5A3
059F:  BSF    03.5
....................   output_low(LCD_RS); 
05A0:  BCF    05.1
05A1:  BCF    03.5
05A2:  BCF    05.1
....................  
....................   delay_cycles(1); 
05A3:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
05A4:  BSF    03.5
05A5:  BCF    05.2
05A6:  BCF    03.5
05A7:  BCF    05.2
....................  
....................   lcd_send_nibble(n >> 4); 
05A8:  BSF    03.5
05A9:  SWAPF  5B,W
05AA:  MOVWF  5C
05AB:  MOVLW  0F
05AC:  ANDWF  5C,F
05AD:  MOVF   5C,W
05AE:  MOVWF  5D
05AF:  BCF    03.5
05B0:  CALL   55B
....................   lcd_send_nibble(n & 0xf); 
05B1:  BSF    03.5
05B2:  MOVF   5B,W
05B3:  ANDLW  0F
05B4:  MOVWF  5C
05B5:  MOVWF  5D
05B6:  BCF    03.5
05B7:  CALL   55B
.................... } 
05B8:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_init(void) 
.................... { 
....................   int8 i; 
....................  
....................   output_low(LCD_RS); 
*
073F:  BSF    03.5
0740:  BCF    05.1
0741:  BCF    03.5
0742:  BCF    05.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
0743:  BSF    03.5
0744:  BCF    05.2
0745:  BCF    03.5
0746:  BCF    05.2
0747:  CLRF   29
0748:  BTFSC  0B.7
0749:  BSF    29.7
074A:  BCF    0B.7
....................  
....................   delay_ms(15);//15ms 
074B:  MOVLW  0F
074C:  BSF    03.5
074D:  MOVWF  56
074E:  BCF    03.5
074F:  CALL   082
0750:  BTFSC  29.7
0751:  BSF    0B.7
....................  
....................   for(i=0 ;i < 3; i++) 
0752:  CLRF   7C
0753:  MOVF   7C,W
0754:  SUBLW  02
0755:  BTFSS  03.0
0756:  GOTO   76F
0757:  CLRF   29
0758:  BTFSC  0B.7
0759:  BSF    29.7
075A:  BCF    0B.7
....................   { 
....................     lcd_send_nibble(0x03); 
075B:  MOVLW  03
075C:  BSF    03.5
075D:  MOVWF  5D
075E:  BCF    03.5
075F:  CALL   55B
0760:  BTFSC  29.7
0761:  BSF    0B.7
0762:  CLRF   29
0763:  BTFSC  0B.7
0764:  BSF    29.7
0765:  BCF    0B.7
....................     delay_ms(5);//5ms 
0766:  MOVLW  05
0767:  BSF    03.5
0768:  MOVWF  56
0769:  BCF    03.5
076A:  CALL   082
076B:  BTFSC  29.7
076C:  BSF    0B.7
....................   } 
076D:  INCF   7C,F
076E:  GOTO   753
076F:  CLRF   29
0770:  BTFSC  0B.7
0771:  BSF    29.7
0772:  BCF    0B.7
....................  
....................   lcd_send_nibble(0x02); 
0773:  MOVLW  02
0774:  BSF    03.5
0775:  MOVWF  5D
0776:  BCF    03.5
0777:  CALL   55B
0778:  BTFSC  29.7
0779:  BSF    0B.7
....................  
....................   for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
077A:  CLRF   7C
077B:  MOVF   7C,W
077C:  SUBLW  03
077D:  BTFSS  03.0
077E:  GOTO   79B
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
077F:  MOVF   7C,W
0780:  CALL   03D
0781:  MOVWF  7D
0782:  CLRF   29
0783:  BTFSC  0B.7
0784:  BSF    29.7
0785:  BCF    0B.7
0786:  BSF    03.5
0787:  CLRF   5A
0788:  MOVF   7D,W
0789:  MOVWF  5B
078A:  BCF    03.5
078B:  CALL   58E
078C:  BTFSC  29.7
078D:  BSF    0B.7
078E:  CLRF   29
078F:  BTFSC  0B.7
0790:  BSF    29.7
0791:  BCF    0B.7
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled. One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
.................... #ifndef USE_LCD_RW 
.................... delay_ms(5); 
0792:  MOVLW  05
0793:  BSF    03.5
0794:  MOVWF  56
0795:  BCF    03.5
0796:  CALL   082
0797:  BTFSC  29.7
0798:  BSF    0B.7
.................... #endif 
.................... } 
0799:  INCF   7C,F
079A:  GOTO   77B
....................  
.................... } 
079B:  BSF    0A.3
079C:  GOTO   41D (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
....................   int8 address; 
....................  
....................   if(y != 1) 
*
05B9:  BSF    03.5
05BA:  DECFSZ 57,W
05BB:  GOTO   5BD
05BC:  GOTO   5C0
....................   address = lcd_line_two; 
05BD:  MOVLW  40
05BE:  MOVWF  58
....................   else 
05BF:  GOTO   5C1
....................   address=0; 
05C0:  CLRF   58
....................  
....................   address += x-1; 
05C1:  MOVLW  01
05C2:  SUBWF  56,W
05C3:  ADDWF  58,F
....................   lcd_send_byte(0, 0x80 | address); 
05C4:  MOVF   58,W
05C5:  IORLW  80
05C6:  MOVWF  59
05C7:  CLRF   5A
05C8:  MOVF   59,W
05C9:  MOVWF  5B
05CA:  BCF    03.5
05CB:  CALL   58E
.................... } 
05CC:  RETLW  00
....................  
.................... //----------------------------- 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................   switch(c) 
....................   { 
05CD:  BSF    03.5
05CE:  MOVF   55,W
05CF:  XORLW  0C
05D0:  BCF    03.5
05D1:  BTFSC  03.2
05D2:  GOTO   5DA
05D3:  XORLW  06
05D4:  BTFSC  03.2
05D5:  GOTO   5E6
05D6:  XORLW  02
05D7:  BTFSC  03.2
05D8:  GOTO   5EE
05D9:  GOTO   5F5
....................     case '\f': 
....................       lcd_send_byte(0,1); 
05DA:  BSF    03.5
05DB:  CLRF   5A
05DC:  MOVLW  01
05DD:  MOVWF  5B
05DE:  BCF    03.5
05DF:  CALL   58E
....................       delay_ms(2);//2ms 
05E0:  MOVLW  02
05E1:  BSF    03.5
05E2:  MOVWF  56
05E3:  BCF    03.5
05E4:  CALL   082
....................       break; 
05E5:  GOTO   5FD
....................  
....................     case '\n': 
....................       lcd_gotoxy(1,2); 
05E6:  MOVLW  01
05E7:  BSF    03.5
05E8:  MOVWF  56
05E9:  MOVLW  02
05EA:  MOVWF  57
05EB:  BCF    03.5
05EC:  CALL   5B9
....................       break; 
05ED:  GOTO   5FD
....................  
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
05EE:  BSF    03.5
05EF:  CLRF   5A
05F0:  MOVLW  10
05F1:  MOVWF  5B
05F2:  BCF    03.5
05F3:  CALL   58E
....................       break; 
05F4:  GOTO   5FD
....................  
....................     default: 
....................       lcd_send_byte(1,c); 
05F5:  MOVLW  01
05F6:  BSF    03.5
05F7:  MOVWF  5A
05F8:  MOVF   55,W
05F9:  MOVWF  5B
05FA:  BCF    03.5
05FB:  CALL   58E
....................       break; 
05FC:  GOTO   5FD
....................   } 
.................... } 
05FD:  RETLW  00
....................  
.................... void lcd_comand(int d) 
.................... { 
.................... lcd_send_byte(0,d); 
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
....................   char value; 
....................  
....................   lcd_gotoxy(x,y); 
....................  
....................   // Wait until busy flag is low. 
....................   while(bit_test(lcd_read_byte(),7)); 
....................  
....................   output_high(LCD_RS); 
....................   value = lcd_read_byte(); 
....................   output_low(lcd_RS); 
....................  
....................   return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
.................... #use rs232(baud=9600,BITS =8,PARITY=N, xmit=PIN_B5, rcv=PIN_B2, stream=HOSTPC,errors) 
*
006F:  BTFSS  0C.5
0070:  GOTO   06F
0071:  MOVF   18,W
0072:  MOVWF  2A
0073:  MOVF   1A,W
0074:  MOVWF  78
0075:  BTFSS  2A.1
0076:  GOTO   079
0077:  BCF    18.4
0078:  BSF    18.4
.................... #define set_point 60 
.................... #define a 9.53 
.................... #define b 0.918 
.................... #define MA 1000.0 
.................... #define MI 0.0 
.................... #define LSB 0.004882  
.................... unsigned int contRTCC=0; 
*
0BCA:  CLRF   2B
.................... float y,rtdv,rtdr; 
.................... float rkt,ekt,pkt,qkt,ukt,pkt_1=0.0,ekt_1=0.0; 
0BCB:  CLRF   4C
0BCC:  CLRF   4D
0BCD:  CLRF   4E
0BCE:  CLRF   4F
0BCF:  CLRF   50
0BD0:  CLRF   51
0BD1:  CLRF   52
0BD2:  CLRF   53
.................... int16 valor,Control,Duty; 
.................... float temp1,Ptemp[4],D; 
.................... int datoTX[2]; 
.................... char c; 
.................... enum {Esperando,Midiendo,ajustando,envioDT}state; 
....................  
.................... //T=(4/fosc * PREESCALER )(256-Carga en el timer)   T-> tiempo de desborde del timer. 
....................  
.................... //INTERRUPCION RDA RECEPCION DE DATOS SERIE 
.................... #int_RDA 
.................... void RDA_ISR(VOID) 
.................... { 
.................... c=fgetc(hostpc); 
*
0079:  MOVF   78,W
007A:  MOVWF  74
.................... PUTC(C); 
007B:  MOVF   74,W
007C:  BTFSS  0C.4
007D:  GOTO   07C
007E:  MOVWF  19
.................... } 
....................  
.................... //!Void FSM_INIT(void) 
.................... //!{ 
.................... //!state=Esperando; 
.................... //! 
.................... //!} 
....................  
.................... //!Void FSM_EXECUTE() 
.................... //!{ 
.................... //!switch(state) 
.................... //!{ 
.................... //!case Esperando : 
.................... //!temp1 
.................... //!} 
.................... //! 
.................... //!} 
.................... //! 
....................  
....................  
.................... //ENVIO DE DATOS SERIE 
007F:  BCF    0C.5
0080:  BCF    0A.3
0081:  GOTO   026
.................... void envioUART(int16 ADC){ 
....................    datoTX[0]=ADC >> 8;     //Asignacion de desplazamiento hacia la derecha                                             
*
07BE:  MOVF   7D,W
07BF:  MOVWF  72
....................    datoTX[1]=ADC & 0xFF;   //Asignacion AND de Bits   
07C0:  MOVF   7C,W
07C1:  MOVWF  73
....................    putc(datoTX[0]);            
07C2:  MOVF   72,W
07C3:  BTFSS  0C.4
07C4:  GOTO   7C3
07C5:  MOVWF  19
....................    putc(datoTX[1]);          //Envio de Datos  
07C6:  MOVF   73,W
07C7:  BTFSS  0C.4
07C8:  GOTO   7C7
07C9:  MOVWF  19
.................... } 
07CA:  BSF    0A.3
07CB:  GOTO   4B4 (RETURN)
....................  
.................... float calculos_rtd(int16 ADC) { 
....................                 float temp; 
.................... rtdv=(ADC*LSB)/48.40;                    /* Calculate volt rtdr  */ 
*
041D:  BSF    03.5
041E:  MOVF   48,W
041F:  MOVWF  4E
0420:  MOVF   47,W
0421:  MOVWF  4D
0422:  BCF    03.5
0423:  CALL   096
0424:  MOVF   7A,W
0425:  BSF    03.5
0426:  MOVWF  58
0427:  MOVF   79,W
0428:  MOVWF  57
0429:  MOVF   78,W
042A:  MOVWF  56
042B:  MOVF   77,W
042C:  MOVWF  55
042D:  MOVLW  2F
042E:  MOVWF  5C
042F:  MOVLW  F9
0430:  MOVWF  5B
0431:  MOVLW  1F
0432:  MOVWF  5A
0433:  MOVLW  77
0434:  MOVWF  59
0435:  BCF    03.5
0436:  CALL   0B5
0437:  MOVF   77,W
0438:  BSF    03.5
0439:  MOVWF  4D
043A:  MOVF   78,W
043B:  MOVWF  4E
043C:  MOVF   79,W
043D:  MOVWF  4F
043E:  MOVF   7A,W
043F:  MOVWF  50
0440:  MOVWF  5E
0441:  MOVF   4F,W
0442:  MOVWF  5D
0443:  MOVF   4E,W
0444:  MOVWF  5C
0445:  MOVF   4D,W
0446:  MOVWF  5B
0447:  MOVLW  9A
0448:  MOVWF  62
0449:  MOVLW  99
044A:  MOVWF  61
044B:  MOVLW  41
044C:  MOVWF  60
044D:  MOVLW  84
044E:  MOVWF  5F
044F:  BCF    03.5
0450:  CALL   12C
0451:  MOVF   7A,W
0452:  MOVWF  33
0453:  MOVF   79,W
0454:  MOVWF  32
0455:  MOVF   78,W
0456:  MOVWF  31
0457:  MOVF   77,W
0458:  MOVWF  30
.................... rtdr = (rtdv*10000.0)/(5.0-rtdv);          /* Calculate RTD resistance rtdr  */  
0459:  MOVF   33,W
045A:  BSF    03.5
045B:  MOVWF  58
045C:  BCF    03.5
045D:  MOVF   32,W
045E:  BSF    03.5
045F:  MOVWF  57
0460:  BCF    03.5
0461:  MOVF   31,W
0462:  BSF    03.5
0463:  MOVWF  56
0464:  BCF    03.5
0465:  MOVF   30,W
0466:  BSF    03.5
0467:  MOVWF  55
0468:  CLRF   5C
0469:  MOVLW  40
046A:  MOVWF  5B
046B:  MOVLW  1C
046C:  MOVWF  5A
046D:  MOVLW  8C
046E:  MOVWF  59
046F:  BCF    03.5
0470:  CALL   0B5
0471:  MOVF   77,W
0472:  BSF    03.5
0473:  MOVWF  4D
0474:  MOVF   78,W
0475:  MOVWF  4E
0476:  MOVF   79,W
0477:  MOVWF  4F
0478:  MOVF   7A,W
0479:  MOVWF  50
047A:  BSF    03.1
047B:  CLRF   5E
047C:  CLRF   5D
047D:  MOVLW  20
047E:  MOVWF  5C
047F:  MOVLW  81
0480:  MOVWF  5B
0481:  BCF    03.5
0482:  MOVF   33,W
0483:  BSF    03.5
0484:  MOVWF  62
0485:  BCF    03.5
0486:  MOVF   32,W
0487:  BSF    03.5
0488:  MOVWF  61
0489:  BCF    03.5
048A:  MOVF   31,W
048B:  BSF    03.5
048C:  MOVWF  60
048D:  BCF    03.5
048E:  MOVF   30,W
048F:  BSF    03.5
0490:  MOVWF  5F
0491:  BCF    03.5
0492:  CALL   1F8
0493:  BSF    03.5
0494:  MOVF   50,W
0495:  MOVWF  5E
0496:  MOVF   4F,W
0497:  MOVWF  5D
0498:  MOVF   4E,W
0499:  MOVWF  5C
049A:  MOVF   4D,W
049B:  MOVWF  5B
049C:  MOVF   7A,W
049D:  MOVWF  62
049E:  MOVF   79,W
049F:  MOVWF  61
04A0:  MOVF   78,W
04A1:  MOVWF  60
04A2:  MOVF   77,W
04A3:  MOVWF  5F
04A4:  BCF    03.5
04A5:  CALL   12C
04A6:  MOVF   7A,W
04A7:  MOVWF  37
04A8:  MOVF   79,W
04A9:  MOVWF  36
04AA:  MOVF   78,W
04AB:  MOVWF  35
04AC:  MOVF   77,W
04AD:  MOVWF  34
.................... y = (0.15274) - ((rtdr-100.0)*(2310.0e-7));  
04AE:  BSF    03.1
04AF:  MOVF   37,W
04B0:  BSF    03.5
04B1:  MOVWF  5E
04B2:  BCF    03.5
04B3:  MOVF   36,W
04B4:  BSF    03.5
04B5:  MOVWF  5D
04B6:  BCF    03.5
04B7:  MOVF   35,W
04B8:  BSF    03.5
04B9:  MOVWF  5C
04BA:  BCF    03.5
04BB:  MOVF   34,W
04BC:  BSF    03.5
04BD:  MOVWF  5B
04BE:  CLRF   62
04BF:  CLRF   61
04C0:  MOVLW  48
04C1:  MOVWF  60
04C2:  MOVLW  85
04C3:  MOVWF  5F
04C4:  BCF    03.5
04C5:  CALL   1F8
04C6:  MOVF   77,W
04C7:  BSF    03.5
04C8:  MOVWF  4D
04C9:  MOVF   78,W
04CA:  MOVWF  4E
04CB:  MOVF   79,W
04CC:  MOVWF  4F
04CD:  MOVF   7A,W
04CE:  MOVWF  50
04CF:  MOVWF  58
04D0:  MOVF   4F,W
04D1:  MOVWF  57
04D2:  MOVF   4E,W
04D3:  MOVWF  56
04D4:  MOVF   4D,W
04D5:  MOVWF  55
04D6:  MOVLW  97
04D7:  MOVWF  5C
04D8:  MOVLW  38
04D9:  MOVWF  5B
04DA:  MOVLW  72
04DB:  MOVWF  5A
04DC:  MOVWF  59
04DD:  BCF    03.5
04DE:  CALL   0B5
04DF:  BSF    03.1
04E0:  MOVLW  E0
04E1:  BSF    03.5
04E2:  MOVWF  5E
04E3:  MOVLW  67
04E4:  MOVWF  5D
04E5:  MOVLW  1C
04E6:  MOVWF  5C
04E7:  MOVLW  7C
04E8:  MOVWF  5B
04E9:  MOVF   7A,W
04EA:  MOVWF  62
04EB:  MOVF   79,W
04EC:  MOVWF  61
04ED:  MOVF   78,W
04EE:  MOVWF  60
04EF:  MOVF   77,W
04F0:  MOVWF  5F
04F1:  BCF    03.5
04F2:  CALL   1F8
04F3:  MOVF   7A,W
04F4:  MOVWF  2F
04F5:  MOVF   79,W
04F6:  MOVWF  2E
04F7:  MOVF   78,W
04F8:  MOVWF  2D
04F9:  MOVF   77,W
04FA:  MOVWF  2C
.................... y = sqrt(y) ; 
04FB:  MOVF   2F,W
04FC:  BSF    03.5
04FD:  MOVWF  50
04FE:  BCF    03.5
04FF:  MOVF   2E,W
0500:  BSF    03.5
0501:  MOVWF  4F
0502:  BCF    03.5
0503:  MOVF   2D,W
0504:  BSF    03.5
0505:  MOVWF  4E
0506:  BCF    03.5
0507:  MOVF   2C,W
0508:  BSF    03.5
0509:  MOVWF  4D
050A:  BCF    03.5
050B:  CALL   37F
050C:  MOVF   7A,W
050D:  MOVWF  2F
050E:  MOVF   79,W
050F:  MOVWF  2E
0510:  MOVF   78,W
0511:  MOVWF  2D
0512:  MOVF   77,W
0513:  MOVWF  2C
.................... temp = (y-0.39083)/(-0.0001155); 
0514:  BSF    03.1
0515:  MOVF   2F,W
0516:  BSF    03.5
0517:  MOVWF  5E
0518:  BCF    03.5
0519:  MOVF   2E,W
051A:  BSF    03.5
051B:  MOVWF  5D
051C:  BCF    03.5
051D:  MOVF   2D,W
051E:  BSF    03.5
051F:  MOVWF  5C
0520:  BCF    03.5
0521:  MOVF   2C,W
0522:  BSF    03.5
0523:  MOVWF  5B
0524:  MOVLW  DF
0525:  MOVWF  62
0526:  MOVLW  1A
0527:  MOVWF  61
0528:  MOVLW  48
0529:  MOVWF  60
052A:  MOVLW  7D
052B:  MOVWF  5F
052C:  BCF    03.5
052D:  CALL   1F8
052E:  MOVF   77,W
052F:  BSF    03.5
0530:  MOVWF  4D
0531:  MOVF   78,W
0532:  MOVWF  4E
0533:  MOVF   79,W
0534:  MOVWF  4F
0535:  MOVF   7A,W
0536:  MOVWF  50
0537:  MOVWF  5E
0538:  MOVF   4F,W
0539:  MOVWF  5D
053A:  MOVF   4E,W
053B:  MOVWF  5C
053C:  MOVF   4D,W
053D:  MOVWF  5B
053E:  MOVLW  97
053F:  MOVWF  62
0540:  MOVLW  38
0541:  MOVWF  61
0542:  MOVLW  F2
0543:  MOVWF  60
0544:  MOVLW  71
0545:  MOVWF  5F
0546:  BCF    03.5
0547:  CALL   12C
0548:  MOVF   7A,W
0549:  BSF    03.5
054A:  MOVWF  4C
054B:  MOVF   79,W
054C:  MOVWF  4B
054D:  MOVF   78,W
054E:  MOVWF  4A
054F:  MOVF   77,W
0550:  MOVWF  49
....................     return temp; 
0551:  MOVF   49,W
0552:  MOVWF  77
0553:  MOVF   4A,W
0554:  MOVWF  78
0555:  MOVF   4B,W
0556:  MOVWF  79
0557:  MOVF   4C,W
0558:  MOVWF  7A
.................... } 
0559:  BCF    03.5
055A:  RETLW  00
....................  
.................... void calculos_pid() { 
.................... //float control; 
.................... rkt=set_point; 
*
0995:  CLRF   3B
0996:  CLRF   3A
0997:  MOVLW  70
0998:  MOVWF  39
0999:  MOVLW  84
099A:  MOVWF  38
....................  
....................   /* Calculate error */ 
....................   ekt=rkt-temp1; 
099B:  BSF    03.1
099C:  CLRF   29
099D:  BTFSC  0B.7
099E:  BSF    29.7
099F:  BCF    0B.7
09A0:  MOVF   3B,W
09A1:  BSF    03.5
09A2:  MOVWF  5E
09A3:  BCF    03.5
09A4:  MOVF   3A,W
09A5:  BSF    03.5
09A6:  MOVWF  5D
09A7:  BCF    03.5
09A8:  MOVF   39,W
09A9:  BSF    03.5
09AA:  MOVWF  5C
09AB:  BCF    03.5
09AC:  MOVF   38,W
09AD:  BSF    03.5
09AE:  MOVWF  5B
09AF:  BCF    03.5
09B0:  MOVF   5D,W
09B1:  BSF    03.5
09B2:  MOVWF  62
09B3:  BCF    03.5
09B4:  MOVF   5C,W
09B5:  BSF    03.5
09B6:  MOVWF  61
09B7:  BCF    03.5
09B8:  MOVF   5B,W
09B9:  BSF    03.5
09BA:  MOVWF  60
09BB:  BCF    03.5
09BC:  MOVF   5A,W
09BD:  BSF    03.5
09BE:  MOVWF  5F
09BF:  BCF    0A.3
09C0:  BCF    03.5
09C1:  CALL   1F8
09C2:  BSF    0A.3
09C3:  BTFSC  29.7
09C4:  BSF    0B.7
09C5:  MOVF   7A,W
09C6:  MOVWF  3F
09C7:  MOVF   79,W
09C8:  MOVWF  3E
09C9:  MOVF   78,W
09CA:  MOVWF  3D
09CB:  MOVF   77,W
09CC:  MOVWF  3C
09CD:  CLRF   29
09CE:  BTFSC  0B.7
09CF:  BSF    29.7
09D0:  BCF    0B.7
....................   /*end  Calculate error */ 
....................  
....................   /* Calculate I term */ 
....................   pkt=b*ekt+pkt_1; 
09D1:  MOVLW  0C
09D2:  BSF    03.5
09D3:  MOVWF  58
09D4:  MOVLW  02
09D5:  MOVWF  57
09D6:  MOVLW  6B
09D7:  MOVWF  56
09D8:  MOVLW  7E
09D9:  MOVWF  55
09DA:  BCF    03.5
09DB:  MOVF   3F,W
09DC:  BSF    03.5
09DD:  MOVWF  5C
09DE:  BCF    03.5
09DF:  MOVF   3E,W
09E0:  BSF    03.5
09E1:  MOVWF  5B
09E2:  BCF    03.5
09E3:  MOVF   3D,W
09E4:  BSF    03.5
09E5:  MOVWF  5A
09E6:  BCF    03.5
09E7:  MOVF   3C,W
09E8:  BSF    03.5
09E9:  MOVWF  59
09EA:  BCF    0A.3
09EB:  BCF    03.5
09EC:  CALL   0B5
09ED:  BSF    0A.3
09EE:  BTFSC  29.7
09EF:  BSF    0B.7
09F0:  MOVF   77,W
09F1:  BSF    03.5
09F2:  MOVWF  20
09F3:  MOVF   78,W
09F4:  MOVWF  21
09F5:  MOVF   79,W
09F6:  MOVWF  22
09F7:  MOVF   7A,W
09F8:  MOVWF  23
09F9:  BCF    03.1
09FA:  BCF    03.5
09FB:  CLRF   29
09FC:  BTFSC  0B.7
09FD:  BSF    29.7
09FE:  BCF    0B.7
09FF:  BSF    03.5
0A00:  MOVF   23,W
0A01:  MOVWF  5E
0A02:  MOVF   22,W
0A03:  MOVWF  5D
0A04:  MOVF   21,W
0A05:  MOVWF  5C
0A06:  MOVF   20,W
0A07:  MOVWF  5B
0A08:  BCF    03.5
0A09:  MOVF   4F,W
0A0A:  BSF    03.5
0A0B:  MOVWF  62
0A0C:  BCF    03.5
0A0D:  MOVF   4E,W
0A0E:  BSF    03.5
0A0F:  MOVWF  61
0A10:  BCF    03.5
0A11:  MOVF   4D,W
0A12:  BSF    03.5
0A13:  MOVWF  60
0A14:  BCF    03.5
0A15:  MOVF   4C,W
0A16:  BSF    03.5
0A17:  MOVWF  5F
0A18:  BCF    0A.3
0A19:  BCF    03.5
0A1A:  CALL   1F8
0A1B:  BSF    0A.3
0A1C:  BTFSC  29.7
0A1D:  BSF    0B.7
0A1E:  MOVF   7A,W
0A1F:  MOVWF  43
0A20:  MOVF   79,W
0A21:  MOVWF  42
0A22:  MOVF   78,W
0A23:  MOVWF  41
0A24:  MOVF   77,W
0A25:  MOVWF  40
0A26:  CLRF   29
0A27:  BTFSC  0B.7
0A28:  BSF    29.7
0A29:  BCF    0B.7
....................   /*end  Calculate I term */ 
....................  
....................   /* Calculate PI output */ 
....................    ukt=pkt+a*ekt; 
0A2A:  MOVLW  E1
0A2B:  BSF    03.5
0A2C:  MOVWF  58
0A2D:  MOVLW  7A
0A2E:  MOVWF  57
0A2F:  MOVLW  18
0A30:  MOVWF  56
0A31:  MOVLW  82
0A32:  MOVWF  55
0A33:  BCF    03.5
0A34:  MOVF   3F,W
0A35:  BSF    03.5
0A36:  MOVWF  5C
0A37:  BCF    03.5
0A38:  MOVF   3E,W
0A39:  BSF    03.5
0A3A:  MOVWF  5B
0A3B:  BCF    03.5
0A3C:  MOVF   3D,W
0A3D:  BSF    03.5
0A3E:  MOVWF  5A
0A3F:  BCF    03.5
0A40:  MOVF   3C,W
0A41:  BSF    03.5
0A42:  MOVWF  59
0A43:  BCF    0A.3
0A44:  BCF    03.5
0A45:  CALL   0B5
0A46:  BSF    0A.3
0A47:  BTFSC  29.7
0A48:  BSF    0B.7
0A49:  BCF    03.1
0A4A:  CLRF   29
0A4B:  BTFSC  0B.7
0A4C:  BSF    29.7
0A4D:  BCF    0B.7
0A4E:  MOVF   43,W
0A4F:  BSF    03.5
0A50:  MOVWF  5E
0A51:  BCF    03.5
0A52:  MOVF   42,W
0A53:  BSF    03.5
0A54:  MOVWF  5D
0A55:  BCF    03.5
0A56:  MOVF   41,W
0A57:  BSF    03.5
0A58:  MOVWF  5C
0A59:  BCF    03.5
0A5A:  MOVF   40,W
0A5B:  BSF    03.5
0A5C:  MOVWF  5B
0A5D:  MOVF   7A,W
0A5E:  MOVWF  62
0A5F:  MOVF   79,W
0A60:  MOVWF  61
0A61:  MOVF   78,W
0A62:  MOVWF  60
0A63:  MOVF   77,W
0A64:  MOVWF  5F
0A65:  BCF    0A.3
0A66:  BCF    03.5
0A67:  CALL   1F8
0A68:  BSF    0A.3
0A69:  BTFSC  29.7
0A6A:  BSF    0B.7
0A6B:  MOVF   7A,W
0A6C:  MOVWF  4B
0A6D:  MOVF   79,W
0A6E:  MOVWF  4A
0A6F:  MOVF   78,W
0A70:  MOVWF  49
0A71:  MOVF   77,W
0A72:  MOVWF  48
0A73:  CLRF   29
0A74:  BTFSC  0B.7
0A75:  BSF    29.7
0A76:  BCF    0B.7
....................   /*end Calculate PI output */ 
....................  
....................   if(ukt > MA) { 
0A77:  BSF    03.5
0A78:  CLRF   5E
0A79:  CLRF   5D
0A7A:  MOVLW  7A
0A7B:  MOVWF  5C
0A7C:  MOVLW  88
0A7D:  MOVWF  5B
0A7E:  BCF    03.5
0A7F:  MOVF   4B,W
0A80:  BSF    03.5
0A81:  MOVWF  62
0A82:  BCF    03.5
0A83:  MOVF   4A,W
0A84:  BSF    03.5
0A85:  MOVWF  61
0A86:  BCF    03.5
0A87:  MOVF   49,W
0A88:  BSF    03.5
0A89:  MOVWF  60
0A8A:  BCF    03.5
0A8B:  MOVF   48,W
0A8C:  BSF    03.5
0A8D:  MOVWF  5F
0A8E:  BCF    0A.3
0A8F:  BCF    03.5
0A90:  CALL   33E
0A91:  BSF    0A.3
0A92:  BTFSC  29.7
0A93:  BSF    0B.7
0A94:  BTFSS  03.0
0A95:  GOTO   2A5
....................   pkt=pkt_1; 
0A96:  MOVF   4F,W
0A97:  MOVWF  43
0A98:  MOVF   4E,W
0A99:  MOVWF  42
0A9A:  MOVF   4D,W
0A9B:  MOVWF  41
0A9C:  MOVF   4C,W
0A9D:  MOVWF  40
....................   ukt =MA;     } 
0A9E:  CLRF   4B
0A9F:  CLRF   4A
0AA0:  MOVLW  7A
0AA1:  MOVWF  49
0AA2:  MOVLW  88
0AA3:  MOVWF  48
....................   else if(ukt < MI) 
0AA4:  GOTO   2D0
0AA5:  CLRF   29
0AA6:  BTFSC  0B.7
0AA7:  BSF    29.7
0AA8:  BCF    0B.7
0AA9:  MOVF   4B,W
0AAA:  BSF    03.5
0AAB:  MOVWF  5E
0AAC:  BCF    03.5
0AAD:  MOVF   4A,W
0AAE:  BSF    03.5
0AAF:  MOVWF  5D
0AB0:  BCF    03.5
0AB1:  MOVF   49,W
0AB2:  BSF    03.5
0AB3:  MOVWF  5C
0AB4:  BCF    03.5
0AB5:  MOVF   48,W
0AB6:  BSF    03.5
0AB7:  MOVWF  5B
0AB8:  CLRF   62
0AB9:  CLRF   61
0ABA:  CLRF   60
0ABB:  CLRF   5F
0ABC:  BCF    0A.3
0ABD:  BCF    03.5
0ABE:  CALL   33E
0ABF:  BSF    0A.3
0AC0:  BTFSC  29.7
0AC1:  BSF    0B.7
0AC2:  BTFSS  03.0
0AC3:  GOTO   2D0
....................   { pkt=pkt_1; 
0AC4:  MOVF   4F,W
0AC5:  MOVWF  43
0AC6:  MOVF   4E,W
0AC7:  MOVWF  42
0AC8:  MOVF   4D,W
0AC9:  MOVWF  41
0ACA:  MOVF   4C,W
0ACB:  MOVWF  40
....................   ukt=MI;      } 
0ACC:  CLRF   4B
0ACD:  CLRF   4A
0ACE:  CLRF   49
0ACF:  CLRF   48
....................  
....................   duty=ukt; 
0AD0:  MOVF   4B,W
0AD1:  BSF    03.5
0AD2:  MOVWF  23
0AD3:  BCF    03.5
0AD4:  MOVF   4A,W
0AD5:  BSF    03.5
0AD6:  MOVWF  22
0AD7:  BCF    03.5
0AD8:  MOVF   49,W
0AD9:  BSF    03.5
0ADA:  MOVWF  21
0ADB:  BCF    03.5
0ADC:  MOVF   48,W
0ADD:  BSF    03.5
0ADE:  MOVWF  20
0ADF:  BCF    0A.3
0AE0:  BCF    03.5
0AE1:  CALL   79D
0AE2:  BSF    0A.3
0AE3:  MOVF   79,W
0AE4:  MOVWF  59
0AE5:  MOVF   78,W
0AE6:  MOVWF  58
0AE7:  CLRF   29
0AE8:  BTFSC  0B.7
0AE9:  BSF    29.7
0AEA:  BCF    0B.7
....................   //D=calculos_pid(temp1); 
....................   D=(int16)duty; 
0AEB:  MOVF   59,W
0AEC:  BSF    03.5
0AED:  MOVWF  4E
0AEE:  BCF    03.5
0AEF:  MOVF   58,W
0AF0:  BSF    03.5
0AF1:  MOVWF  4D
0AF2:  BCF    0A.3
0AF3:  BCF    03.5
0AF4:  CALL   096
0AF5:  BSF    0A.3
0AF6:  BTFSC  29.7
0AF7:  BSF    0B.7
0AF8:  MOVF   7A,W
0AF9:  MOVWF  71
0AFA:  MOVF   79,W
0AFB:  MOVWF  70
0AFC:  MOVF   78,W
0AFD:  MOVWF  6F
0AFE:  MOVF   77,W
0AFF:  MOVWF  6E
....................   Control=((1000-D)); 
0B00:  BSF    03.1
0B01:  CLRF   29
0B02:  BTFSC  0B.7
0B03:  BSF    29.7
0B04:  BCF    0B.7
0B05:  BSF    03.5
0B06:  CLRF   5E
0B07:  CLRF   5D
0B08:  MOVLW  7A
0B09:  MOVWF  5C
0B0A:  MOVLW  88
0B0B:  MOVWF  5B
0B0C:  MOVF   71,W
0B0D:  MOVWF  62
0B0E:  MOVF   70,W
0B0F:  MOVWF  61
0B10:  BCF    03.5
0B11:  MOVF   6F,W
0B12:  BSF    03.5
0B13:  MOVWF  60
0B14:  BCF    03.5
0B15:  MOVF   6E,W
0B16:  BSF    03.5
0B17:  MOVWF  5F
0B18:  BCF    0A.3
0B19:  BCF    03.5
0B1A:  CALL   1F8
0B1B:  BSF    0A.3
0B1C:  BTFSC  29.7
0B1D:  BSF    0B.7
0B1E:  MOVF   7A,W
0B1F:  BSF    03.5
0B20:  MOVWF  23
0B21:  MOVF   79,W
0B22:  MOVWF  22
0B23:  MOVF   78,W
0B24:  MOVWF  21
0B25:  MOVF   77,W
0B26:  MOVWF  20
0B27:  BCF    0A.3
0B28:  BCF    03.5
0B29:  CALL   79D
0B2A:  BSF    0A.3
0B2B:  MOVF   79,W
0B2C:  MOVWF  57
0B2D:  MOVF   78,W
0B2E:  MOVWF  56
....................  
....................   pkt_1 = pkt ; 
0B2F:  MOVF   43,W
0B30:  MOVWF  4F
0B31:  MOVF   42,W
0B32:  MOVWF  4E
0B33:  MOVF   41,W
0B34:  MOVWF  4D
0B35:  MOVF   40,W
0B36:  MOVWF  4C
....................   ekt_1= ekt; 
0B37:  MOVF   3F,W
0B38:  MOVWF  53
0B39:  MOVF   3E,W
0B3A:  MOVWF  52
0B3B:  MOVF   3D,W
0B3C:  MOVWF  51
0B3D:  MOVF   3C,W
0B3E:  MOVWF  50
....................                  
.................... //    return Control;  
.................... } 
0B3F:  RETLW  00
....................  
.................... #int_timer0 
.................... void int_tiempo0(void){ 
.................... ++contRTCC; 
*
0800:  INCF   2B,F
.................... if(contRTCC==10){ 
0801:  MOVF   2B,W
0802:  SUBLW  0A
0803:  BTFSS  03.2
0804:  GOTO   02C
.................... output_high(pin_a0); 
0805:  BSF    03.5
0806:  BCF    05.0
0807:  BCF    03.5
0808:  BSF    05.0
.................... delay_ms(10); 
0809:  MOVLW  0A
080A:  BSF    03.5
080B:  MOVWF  56
080C:  BCF    0A.3
080D:  BCF    03.5
080E:  CALL   082
080F:  BSF    0A.3
.................... valor=read_adc(); 
0810:  BSF    1F.2
0811:  BTFSC  1F.2
0812:  GOTO   011
0813:  BSF    03.5
0814:  MOVF   1E,W
0815:  BCF    03.5
0816:  MOVWF  54
0817:  MOVF   1E,W
0818:  MOVWF  55
.................... Ptemp[0]=calculos_rtd(valor); 
0819:  MOVF   55,W
081A:  BSF    03.5
081B:  MOVWF  48
081C:  BCF    03.5
081D:  MOVF   54,W
081E:  BSF    03.5
081F:  MOVWF  47
0820:  BCF    0A.3
0821:  BCF    03.5
0822:  CALL   41D
0823:  BSF    0A.3
0824:  MOVF   7A,W
0825:  MOVWF  61
0826:  MOVF   79,W
0827:  MOVWF  60
0828:  MOVF   78,W
0829:  MOVWF  5F
082A:  MOVF   77,W
082B:  MOVWF  5E
....................   
.................... //output_toggle(PIN_A0); 
.................... } 
.................... if(contRTCC==20){ 
082C:  MOVF   2B,W
082D:  SUBLW  14
082E:  BTFSS  03.2
082F:  GOTO   05F
.................... valor=read_adc(); 
0830:  BSF    1F.2
0831:  BTFSC  1F.2
0832:  GOTO   031
0833:  BSF    03.5
0834:  MOVF   1E,W
0835:  BCF    03.5
0836:  MOVWF  54
0837:  MOVF   1E,W
0838:  MOVWF  55
.................... Ptemp[1]=calculos_rtd(valor);; 
0839:  MOVF   55,W
083A:  BSF    03.5
083B:  MOVWF  48
083C:  BCF    03.5
083D:  MOVF   54,W
083E:  BSF    03.5
083F:  MOVWF  47
0840:  BCF    0A.3
0841:  BCF    03.5
0842:  CALL   41D
0843:  BSF    0A.3
0844:  MOVF   7A,W
0845:  MOVWF  65
0846:  MOVF   79,W
0847:  MOVWF  64
0848:  MOVF   78,W
0849:  MOVWF  63
084A:  MOVF   77,W
084B:  MOVWF  62
.................... delay_ms(1); 
084C:  MOVLW  01
084D:  BSF    03.5
084E:  MOVWF  56
084F:  BCF    0A.3
0850:  BCF    03.5
0851:  CALL   082
0852:  BSF    0A.3
.................... output_toggle(PIN_A0); 
0853:  BSF    03.5
0854:  BCF    05.0
0855:  MOVLW  01
0856:  BCF    03.5
0857:  XORWF  05,F
.................... delay_ms(10); 
0858:  MOVLW  0A
0859:  BSF    03.5
085A:  MOVWF  56
085B:  BCF    0A.3
085C:  BCF    03.5
085D:  CALL   082
085E:  BSF    0A.3
.................... } 
.................... if(contRTCC==30){ 
085F:  MOVF   2B,W
0860:  SUBLW  1E
0861:  BTFSS  03.2
0862:  GOTO   092
.................... valor=read_adc(); 
0863:  BSF    1F.2
0864:  BTFSC  1F.2
0865:  GOTO   064
0866:  BSF    03.5
0867:  MOVF   1E,W
0868:  BCF    03.5
0869:  MOVWF  54
086A:  MOVF   1E,W
086B:  MOVWF  55
.................... Ptemp[2]=calculos_rtd(valor);; 
086C:  MOVF   55,W
086D:  BSF    03.5
086E:  MOVWF  48
086F:  BCF    03.5
0870:  MOVF   54,W
0871:  BSF    03.5
0872:  MOVWF  47
0873:  BCF    0A.3
0874:  BCF    03.5
0875:  CALL   41D
0876:  BSF    0A.3
0877:  MOVF   7A,W
0878:  MOVWF  69
0879:  MOVF   79,W
087A:  MOVWF  68
087B:  MOVF   78,W
087C:  MOVWF  67
087D:  MOVF   77,W
087E:  MOVWF  66
.................... delay_ms(1); 
087F:  MOVLW  01
0880:  BSF    03.5
0881:  MOVWF  56
0882:  BCF    0A.3
0883:  BCF    03.5
0884:  CALL   082
0885:  BSF    0A.3
.................... output_toggle(PIN_A0); 
0886:  BSF    03.5
0887:  BCF    05.0
0888:  MOVLW  01
0889:  BCF    03.5
088A:  XORWF  05,F
.................... delay_ms(10); 
088B:  MOVLW  0A
088C:  BSF    03.5
088D:  MOVWF  56
088E:  BCF    0A.3
088F:  BCF    03.5
0890:  CALL   082
0891:  BSF    0A.3
.................... } 
.................... if(contRTCC==40){ 
0892:  MOVF   2B,W
0893:  SUBLW  28
0894:  BTFSS  03.2
0895:  GOTO   192
.................... valor=read_adc(); 
0896:  BSF    1F.2
0897:  BTFSC  1F.2
0898:  GOTO   097
0899:  BSF    03.5
089A:  MOVF   1E,W
089B:  BCF    03.5
089C:  MOVWF  54
089D:  MOVF   1E,W
089E:  MOVWF  55
.................... Ptemp[3]=calculos_rtd(valor);; 
089F:  MOVF   55,W
08A0:  BSF    03.5
08A1:  MOVWF  48
08A2:  BCF    03.5
08A3:  MOVF   54,W
08A4:  BSF    03.5
08A5:  MOVWF  47
08A6:  BCF    0A.3
08A7:  BCF    03.5
08A8:  CALL   41D
08A9:  BSF    0A.3
08AA:  MOVF   7A,W
08AB:  MOVWF  6D
08AC:  MOVF   79,W
08AD:  MOVWF  6C
08AE:  MOVF   78,W
08AF:  MOVWF  6B
08B0:  MOVF   77,W
08B1:  MOVWF  6A
.................... delay_ms(1); 
08B2:  MOVLW  01
08B3:  BSF    03.5
08B4:  MOVWF  56
08B5:  BCF    0A.3
08B6:  BCF    03.5
08B7:  CALL   082
08B8:  BSF    0A.3
.................... output_toggle(PIN_A0); 
08B9:  BSF    03.5
08BA:  BCF    05.0
08BB:  MOVLW  01
08BC:  BCF    03.5
08BD:  XORWF  05,F
.................... delay_ms(10); 
08BE:  MOVLW  0A
08BF:  BSF    03.5
08C0:  MOVWF  56
08C1:  BCF    0A.3
08C2:  BCF    03.5
08C3:  CALL   082
08C4:  BSF    0A.3
.................... temp1=(Ptemp[0]+Ptemp[1]+Ptemp[2]+Ptemp[3])/4; 
08C5:  BCF    03.1
08C6:  MOVF   61,W
08C7:  BSF    03.5
08C8:  MOVWF  5E
08C9:  BCF    03.5
08CA:  MOVF   60,W
08CB:  BSF    03.5
08CC:  MOVWF  5D
08CD:  BCF    03.5
08CE:  MOVF   5F,W
08CF:  BSF    03.5
08D0:  MOVWF  5C
08D1:  BCF    03.5
08D2:  MOVF   5E,W
08D3:  BSF    03.5
08D4:  MOVWF  5B
08D5:  BCF    03.5
08D6:  MOVF   65,W
08D7:  BSF    03.5
08D8:  MOVWF  62
08D9:  BCF    03.5
08DA:  MOVF   64,W
08DB:  BSF    03.5
08DC:  MOVWF  61
08DD:  BCF    03.5
08DE:  MOVF   63,W
08DF:  BSF    03.5
08E0:  MOVWF  60
08E1:  BCF    03.5
08E2:  MOVF   62,W
08E3:  BSF    03.5
08E4:  MOVWF  5F
08E5:  BCF    0A.3
08E6:  BCF    03.5
08E7:  CALL   1F8
08E8:  BSF    0A.3
08E9:  MOVF   77,W
08EA:  BSF    03.5
08EB:  MOVWF  47
08EC:  MOVF   78,W
08ED:  MOVWF  48
08EE:  MOVF   79,W
08EF:  MOVWF  49
08F0:  MOVF   7A,W
08F1:  MOVWF  4A
08F2:  BCF    03.1
08F3:  MOVF   4A,W
08F4:  MOVWF  5E
08F5:  MOVF   49,W
08F6:  MOVWF  5D
08F7:  MOVF   48,W
08F8:  MOVWF  5C
08F9:  MOVF   47,W
08FA:  MOVWF  5B
08FB:  BCF    03.5
08FC:  MOVF   69,W
08FD:  BSF    03.5
08FE:  MOVWF  62
08FF:  BCF    03.5
0900:  MOVF   68,W
0901:  BSF    03.5
0902:  MOVWF  61
0903:  BCF    03.5
0904:  MOVF   67,W
0905:  BSF    03.5
0906:  MOVWF  60
0907:  BCF    03.5
0908:  MOVF   66,W
0909:  BSF    03.5
090A:  MOVWF  5F
090B:  BCF    0A.3
090C:  BCF    03.5
090D:  CALL   1F8
090E:  BSF    0A.3
090F:  MOVF   77,W
0910:  BSF    03.5
0911:  MOVWF  4B
0912:  MOVF   78,W
0913:  MOVWF  4C
0914:  MOVF   79,W
0915:  MOVWF  4D
0916:  MOVF   7A,W
0917:  MOVWF  4E
0918:  BCF    03.1
0919:  MOVF   4E,W
091A:  MOVWF  5E
091B:  MOVF   4D,W
091C:  MOVWF  5D
091D:  MOVF   4C,W
091E:  MOVWF  5C
091F:  MOVF   4B,W
0920:  MOVWF  5B
0921:  BCF    03.5
0922:  MOVF   6D,W
0923:  BSF    03.5
0924:  MOVWF  62
0925:  BCF    03.5
0926:  MOVF   6C,W
0927:  BSF    03.5
0928:  MOVWF  61
0929:  BCF    03.5
092A:  MOVF   6B,W
092B:  BSF    03.5
092C:  MOVWF  60
092D:  BCF    03.5
092E:  MOVF   6A,W
092F:  BSF    03.5
0930:  MOVWF  5F
0931:  BCF    0A.3
0932:  BCF    03.5
0933:  CALL   1F8
0934:  BSF    0A.3
0935:  MOVF   77,W
0936:  BSF    03.5
0937:  MOVWF  4F
0938:  MOVF   78,W
0939:  MOVWF  50
093A:  MOVF   79,W
093B:  MOVWF  51
093C:  MOVF   7A,W
093D:  MOVWF  52
093E:  MOVWF  5E
093F:  MOVF   51,W
0940:  MOVWF  5D
0941:  MOVF   50,W
0942:  MOVWF  5C
0943:  MOVF   4F,W
0944:  MOVWF  5B
0945:  CLRF   62
0946:  CLRF   61
0947:  CLRF   60
0948:  MOVLW  81
0949:  MOVWF  5F
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   12C
094D:  BSF    0A.3
094E:  MOVF   7A,W
094F:  MOVWF  5D
0950:  MOVF   79,W
0951:  MOVWF  5C
0952:  MOVF   78,W
0953:  MOVWF  5B
0954:  MOVF   77,W
0955:  MOVWF  5A
.................... lcd_gotoxy(2,2); 
0956:  MOVLW  02
0957:  BSF    03.5
0958:  MOVWF  56
0959:  MOVWF  57
095A:  BCF    0A.3
095B:  BCF    03.5
095C:  CALL   5B9
095D:  BSF    0A.3
.................... printf(lcd_putc,"TEMP %4.2f",temp1); 
095E:  BSF    03.5
095F:  CLRF   47
0960:  MOVF   47,W
0961:  BCF    0A.3
0962:  BCF    03.5
0963:  CALL   045
0964:  BSF    0A.3
0965:  BSF    03.5
0966:  INCF   47,F
0967:  MOVWF  77
0968:  MOVWF  55
0969:  BCF    0A.3
096A:  BCF    03.5
096B:  CALL   5CD
096C:  BSF    0A.3
096D:  MOVLW  05
096E:  BSF    03.5
096F:  SUBWF  47,W
0970:  BTFSS  03.2
0971:  GOTO   160
0972:  MOVLW  03
0973:  MOVWF  04
0974:  BCF    03.5
0975:  MOVF   5D,W
0976:  BSF    03.5
0977:  MOVWF  4B
0978:  BCF    03.5
0979:  MOVF   5C,W
097A:  BSF    03.5
097B:  MOVWF  4A
097C:  BCF    03.5
097D:  MOVF   5B,W
097E:  BSF    03.5
097F:  MOVWF  49
0980:  BCF    03.5
0981:  MOVF   5A,W
0982:  BSF    03.5
0983:  MOVWF  48
0984:  MOVLW  02
0985:  MOVWF  4C
0986:  BCF    0A.3
0987:  BCF    03.5
0988:  CALL   663
0989:  BSF    0A.3
.................... delay_ms(200); 
098A:  MOVLW  C8
098B:  BSF    03.5
098C:  MOVWF  56
098D:  BCF    0A.3
098E:  BCF    03.5
098F:  CALL   082
0990:  BSF    0A.3
....................    contRTCC=0; 
0991:  CLRF   2B
.................... } 
....................  
....................  
....................  // output_low(pin_a0); 
....................  
.................... } 
....................  
0992:  BCF    0B.2
0993:  BCF    0A.3
0994:  GOTO   026
.................... void main(void){ 
*
0BB1:  CLRF   04
0BB2:  BCF    03.7
0BB3:  MOVLW  1F
0BB4:  ANDWF  03,F
0BB5:  MOVLW  72
0BB6:  BSF    03.5
0BB7:  MOVWF  0F
0BB8:  MOVF   0F,W
0BB9:  MOVLW  0C
0BBA:  MOVWF  19
0BBB:  MOVLW  A2
0BBC:  MOVWF  18
0BBD:  MOVLW  90
0BBE:  BCF    03.5
0BBF:  MOVWF  18
0BC0:  BSF    03.5
0BC1:  BCF    1F.4
0BC2:  BCF    1F.5
0BC3:  MOVF   1B,W
0BC4:  ANDLW  80
0BC5:  MOVWF  1B
0BC6:  MOVLW  07
0BC7:  MOVWF  1C
.................... char v; 
.................... //float y,rtdv,rtdr,LSB; 
.................... setup_oscillator(OSC_8MHZ | OSC_INTRC); 
*
0BD3:  MOVLW  72
0BD4:  BSF    03.5
0BD5:  MOVWF  0F
0BD6:  MOVF   0F,W
.................... setup_comparator(NC_NC_NC_NC); 
0BD7:  MOVLW  07
0BD8:  MOVWF  1C
0BD9:  MOVF   05,W
0BDA:  MOVWF  05
0BDB:  MOVLW  06
0BDC:  MOVWF  77
0BDD:  DECFSZ 77,F
0BDE:  GOTO   3DD
0BDF:  NOP
0BE0:  MOVF   1C,W
0BE1:  BCF    03.5
0BE2:  BCF    0D.6
.................... setup_vref(FALSE); 
0BE3:  BSF    03.5
0BE4:  CLRF   1D
....................    setup_wdt(WDT_OFF); 
0BE5:  BCF    03.5
0BE6:  BSF    03.6
0BE7:  BCF    05.0
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_128); 
0BE8:  BSF    03.5
0BE9:  BCF    03.6
0BEA:  MOVF   01,W
0BEB:  ANDLW  C0
0BEC:  IORLW  06
0BED:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0BEE:  BCF    03.5
0BEF:  CLRF   10
....................    setup_timer_2(T2_DIV_BY_4, 250, 1);  
0BF0:  MOVLW  00
0BF1:  MOVWF  78
0BF2:  IORLW  05
0BF3:  MOVWF  12
0BF4:  MOVLW  FA
0BF5:  BSF    03.5
0BF6:  MOVWF  12
....................    setup_ccp1(CCP_PWM);  
0BF7:  BCF    06.0
0BF8:  BCF    03.5
0BF9:  BCF    06.0
0BFA:  MOVLW  0C
0BFB:  MOVWF  17
....................    enable_interrupts(INT_TIMER0); 
0BFC:  BSF    0B.5
....................    enable_interrupts(INT_RDA); 
0BFD:  BSF    03.5
0BFE:  BSF    0C.5
....................    enable_interrupts(global); 
0BFF:  MOVLW  C0
0C00:  BCF    03.5
0C01:  IORWF  0B,F
.................... set_tris_A(0x10); 
0C02:  MOVLW  10
0C03:  BSF    03.5
0C04:  MOVWF  05
.................... set_tris_b(0x04);               //entradas y salidas del puerto B prioridad Entrada RS232 
0C05:  MOVLW  04
0C06:  MOVWF  06
.................... setup_adc_ports(sAN4|VSS_VDD); 
0C07:  BCF    1F.4
0C08:  BCF    1F.5
0C09:  MOVF   1B,W
0C0A:  ANDLW  80
0C0B:  IORLW  10
0C0C:  MOVWF  1B
.................... setup_adc(ADC_CLOCK_INTERNAL); 
0C0D:  BCF    1F.6
0C0E:  BCF    03.5
0C0F:  BSF    1F.6
0C10:  BSF    1F.7
0C11:  BSF    03.5
0C12:  BSF    1F.7
0C13:  BCF    03.5
0C14:  BSF    1F.0
.................... set_adc_channel(4); 
0C15:  MOVLW  20
0C16:  MOVWF  78
0C17:  MOVF   1F,W
0C18:  ANDLW  C7
0C19:  IORWF  78,W
0C1A:  MOVWF  1F
.................... lcd_init();                      //Inicializamos el LCD. 
0C1B:  BCF    0A.3
0C1C:  GOTO   73F
0C1D:  BSF    0A.3
.................... lcd_putc("\fControl =");      // 
0C1E:  CLRF   7C
0C1F:  MOVF   7C,W
0C20:  BCF    0A.3
0C21:  CALL   054
0C22:  BSF    0A.3
0C23:  IORLW  00
0C24:  BTFSC  03.2
0C25:  GOTO   434
0C26:  INCF   7C,F
0C27:  CLRF   29
0C28:  BTFSC  0B.7
0C29:  BSF    29.7
0C2A:  BCF    0B.7
0C2B:  BSF    03.5
0C2C:  MOVWF  55
0C2D:  BCF    0A.3
0C2E:  BCF    03.5
0C2F:  CALL   5CD
0C30:  BSF    0A.3
0C31:  BTFSC  29.7
0C32:  BSF    0B.7
0C33:  GOTO   41F
0C34:  CLRF   29
0C35:  BTFSC  0B.7
0C36:  BSF    29.7
0C37:  BCF    0B.7
....................  
....................      do { 
....................             int_tiempo0(); 
0C38:  BSF    0B.2
0C39:  BTFSC  29.7
0C3A:  BSF    0B.7
....................             calculos_pid(); 
0C3B:  CALL   195
....................             set_pwm1_duty(Control); 
0C3C:  MOVF   57,W
0C3D:  MOVWF  79
0C3E:  MOVF   56,W
0C3F:  MOVWF  78
0C40:  RRF    79,F
0C41:  RRF    78,F
0C42:  RRF    79,F
0C43:  RRF    78,F
0C44:  RRF    79,F
0C45:  MOVF   78,W
0C46:  MOVWF  15
0C47:  RRF    79,F
0C48:  RRF    79,W
0C49:  ANDLW  30
0C4A:  MOVWF  77
0C4B:  MOVF   17,W
0C4C:  ANDLW  CF
0C4D:  IORWF  77,W
0C4E:  MOVWF  17
0C4F:  CLRF   29
0C50:  BTFSC  0B.7
0C51:  BSF    29.7
0C52:  BCF    0B.7
....................             lcd_gotoxy(9,1);  
0C53:  MOVLW  09
0C54:  BSF    03.5
0C55:  MOVWF  56
0C56:  MOVLW  01
0C57:  MOVWF  57
0C58:  BCF    0A.3
0C59:  BCF    03.5
0C5A:  CALL   5B9
0C5B:  BSF    0A.3
0C5C:  BTFSC  29.7
0C5D:  BSF    0B.7
0C5E:  CLRF   29
0C5F:  BTFSC  0B.7
0C60:  BSF    29.7
0C61:  BCF    0B.7
....................             printf(lcd_putc,"PI %lu",Control); 
0C62:  MOVLW  50
0C63:  BSF    03.5
0C64:  MOVWF  55
0C65:  BCF    0A.3
0C66:  BCF    03.5
0C67:  CALL   5CD
0C68:  BSF    0A.3
0C69:  BTFSC  29.7
0C6A:  BSF    0B.7
0C6B:  CLRF   29
0C6C:  BTFSC  0B.7
0C6D:  BSF    29.7
0C6E:  BCF    0B.7
0C6F:  MOVLW  49
0C70:  BSF    03.5
0C71:  MOVWF  55
0C72:  BCF    0A.3
0C73:  BCF    03.5
0C74:  CALL   5CD
0C75:  BSF    0A.3
0C76:  BTFSC  29.7
0C77:  BSF    0B.7
0C78:  CLRF   29
0C79:  BTFSC  0B.7
0C7A:  BSF    29.7
0C7B:  BCF    0B.7
0C7C:  MOVLW  20
0C7D:  BSF    03.5
0C7E:  MOVWF  55
0C7F:  BCF    0A.3
0C80:  BCF    03.5
0C81:  CALL   5CD
0C82:  BSF    0A.3
0C83:  BTFSC  29.7
0C84:  BSF    0B.7
0C85:  MOVLW  10
0C86:  MOVWF  04
0C87:  MOVF   57,W
0C88:  MOVWF  7E
0C89:  MOVF   56,W
0C8A:  MOVWF  7D
0C8B:  CALL   340
....................             delay_ms(300); 
0C8C:  MOVLW  02
0C8D:  MOVWF  7C
0C8E:  CLRF   29
0C8F:  BTFSC  0B.7
0C90:  BSF    29.7
0C91:  BCF    0B.7
0C92:  MOVLW  96
0C93:  BSF    03.5
0C94:  MOVWF  56
0C95:  BCF    0A.3
0C96:  BCF    03.5
0C97:  CALL   082
0C98:  BSF    0A.3
0C99:  BTFSC  29.7
0C9A:  BSF    0B.7
0C9B:  DECFSZ 7C,F
0C9C:  GOTO   48E
....................      // c=fgetc(HOSTPC); 
....................      v=c; 
0C9D:  MOVF   74,W
0C9E:  MOVWF  76
....................      delay_us(100); 
0C9F:  MOVLW  42
0CA0:  MOVWF  77
0CA1:  DECFSZ 77,F
0CA2:  GOTO   4A1
0CA3:  NOP
....................           } while(v!='1' && v!='2' && v!='3'); 
0CA4:  MOVF   76,W
0CA5:  SUBLW  31
0CA6:  BTFSC  03.2
0CA7:  GOTO   4B0
0CA8:  MOVF   76,W
0CA9:  SUBLW  32
0CAA:  BTFSC  03.2
0CAB:  GOTO   4B0
0CAC:  MOVF   76,W
0CAD:  SUBLW  33
0CAE:  BTFSS  03.2
0CAF:  GOTO   434
....................            
....................  switch (v) 
....................            { 
0CB0:  MOVF   76,W
0CB1:  XORLW  31
0CB2:  BTFSS  03.2
0CB3:  GOTO   511
....................             case '1':  
0CB4:  CLRF   29
0CB5:  BTFSC  0B.7
0CB6:  BSF    29.7
0CB7:  BCF    0B.7
....................             { 
....................             inicio: 
....................             int_tiempo0(); 
0CB8:  BSF    0B.2
0CB9:  BTFSC  29.7
0CBA:  BSF    0B.7
....................             calculos_pid(); 
0CBB:  CALL   195
....................             set_pwm1_duty(Control); 
0CBC:  MOVF   57,W
0CBD:  MOVWF  79
0CBE:  MOVF   56,W
0CBF:  MOVWF  78
0CC0:  RRF    79,F
0CC1:  RRF    78,F
0CC2:  RRF    79,F
0CC3:  RRF    78,F
0CC4:  RRF    79,F
0CC5:  MOVF   78,W
0CC6:  MOVWF  15
0CC7:  RRF    79,F
0CC8:  RRF    79,W
0CC9:  ANDLW  30
0CCA:  MOVWF  77
0CCB:  MOVF   17,W
0CCC:  ANDLW  CF
0CCD:  IORWF  77,W
0CCE:  MOVWF  17
0CCF:  CLRF   29
0CD0:  BTFSC  0B.7
0CD1:  BSF    29.7
0CD2:  BCF    0B.7
....................             lcd_gotoxy(9,1);  
0CD3:  MOVLW  09
0CD4:  BSF    03.5
0CD5:  MOVWF  56
0CD6:  MOVLW  01
0CD7:  MOVWF  57
0CD8:  BCF    0A.3
0CD9:  BCF    03.5
0CDA:  CALL   5B9
0CDB:  BSF    0A.3
0CDC:  BTFSC  29.7
0CDD:  BSF    0B.7
....................             printf(lcd_putc,"PI1 %lu",Control); 
0CDE:  CLRF   7C
0CDF:  MOVF   7C,W
0CE0:  BCF    0A.3
0CE1:  CALL   063
0CE2:  BSF    0A.3
0CE3:  INCF   7C,F
0CE4:  MOVWF  77
0CE5:  CLRF   29
0CE6:  BTFSC  0B.7
0CE7:  BSF    29.7
0CE8:  BCF    0B.7
0CE9:  MOVF   77,W
0CEA:  BSF    03.5
0CEB:  MOVWF  55
0CEC:  BCF    0A.3
0CED:  BCF    03.5
0CEE:  CALL   5CD
0CEF:  BSF    0A.3
0CF0:  BTFSC  29.7
0CF1:  BSF    0B.7
0CF2:  MOVLW  04
0CF3:  SUBWF  7C,W
0CF4:  BTFSS  03.2
0CF5:  GOTO   4DF
0CF6:  MOVLW  10
0CF7:  MOVWF  04
0CF8:  MOVF   57,W
0CF9:  MOVWF  7E
0CFA:  MOVF   56,W
0CFB:  MOVWF  7D
0CFC:  CALL   340
0CFD:  CLRF   29
0CFE:  BTFSC  0B.7
0CFF:  BSF    29.7
0D00:  BCF    0B.7
....................             delay_ms(100); 
0D01:  MOVLW  64
0D02:  BSF    03.5
0D03:  MOVWF  56
0D04:  BCF    0A.3
0D05:  BCF    03.5
0D06:  CALL   082
0D07:  BSF    0A.3
0D08:  BTFSC  29.7
0D09:  BSF    0B.7
....................             envioUART(valor); 
0D0A:  MOVF   55,W
0D0B:  MOVWF  7D
0D0C:  MOVF   54,W
0D0D:  MOVWF  7C
0D0E:  BCF    0A.3
0D0F:  GOTO   7BE
0D10:  BSF    0A.3
....................             goto inicio; 
....................              
....................             } 
....................     
....................           }  //end Switch 
....................  
.................... } 
0D11:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT MCLR NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT INTRC_IO
   Word  2: 3FFF   FCMEN IESO
