CCS PCM C Compiler, Version 4.084, 27019               04-Dec-16 01:02

               Filename: Project Control PI.lst

               ROM used: 3674 words (90%)
                         Largest free fragment is 410
               RAM used: 115 (31%) at main() level
                         192 (52%) worst case
               Stack:    11 worst case (5 in main + 6 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   499
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.5
001F:  GOTO   022
0020:  BTFSC  0C.5
0021:  GOTO   039
0022:  BTFSS  0B.5
0023:  GOTO   026
0024:  BTFSC  0B.2
0025:  GOTO   03B
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  7B
0032:  MOVF   28,W
0033:  MOVWF  0A
0034:  SWAPF  21,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   06F
003B:  BSF    0A.3
003C:  GOTO   000
.................... #include <16f88.h>//pic a utilizar 
.................... //////// Standard Header file for the PIC16F88 device //////////////// 
.................... #device PIC16F88 
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES NOWDT, HS NOPUT,NOBROWNOUT,MCLR, NOLVP, NOCPD, NOPROTECT,INTRC_IO,CCPB0,NOPUT //si pongo CCPB3 
.................... #BYTE OSCCON = 0b01110000 
.................... #use delay (internal=8MHZ) 
*
0084:  MOVLW  E3
0085:  MOVWF  04
0086:  BCF    03.7
0087:  MOVF   00,W
0088:  BTFSC  03.2
0089:  GOTO   097
008A:  MOVLW  02
008B:  MOVWF  78
008C:  CLRF   77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  DECFSZ 78,F
0090:  GOTO   08C
0091:  MOVLW  97
0092:  MOVWF  77
0093:  DECFSZ 77,F
0094:  GOTO   093
0095:  DECFSZ 00,F
0096:  GOTO   08A
0097:  RETLW  00
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
*
051C:  MOVF   5D,W
051D:  MOVWF  6B
051E:  MOVF   5C,W
051F:  MOVWF  6A
0520:  MOVF   5B,W
0521:  MOVWF  69
0522:  MOVF   5A,W
0523:  MOVWF  68
0524:  CLRF   6F
0525:  CLRF   6E
0526:  CLRF   6D
0527:  CLRF   6C
0528:  BCF    03.5
0529:  CALL   398
052A:  BTFSC  03.0
052B:  GOTO   52E
052C:  BTFSS  03.2
052D:  GOTO   533
....................       return(0.0); 
052E:  CLRF   77
052F:  CLRF   78
0530:  CLRF   79
0531:  CLRF   7A
0532:  GOTO   5C6
....................  
....................    y=x; 
0533:  BSF    03.5
0534:  MOVF   5D,W
0535:  MOVWF  61
0536:  MOVF   5C,W
0537:  MOVWF  60
0538:  MOVF   5B,W
0539:  MOVWF  5F
053A:  MOVF   5A,W
053B:  MOVWF  5E
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
053C:  CLRF   67
053D:  MOVLW  DE
053E:  MOVWF  66
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
053F:  MOVF   66,W
0540:  MOVWF  04
0541:  BCF    03.7
0542:  BTFSC  67.0
0543:  BSF    03.7
0544:  MOVF   00,W
0545:  CLRF   6B
0546:  MOVWF  6A
0547:  MOVLW  7F
0548:  ADDWF  6A,W
0549:  MOVWF  6C
054A:  MOVF   6B,W
054B:  MOVWF  6D
054C:  BTFSC  03.0
054D:  INCF   6D,F
054E:  BCF    03.0
054F:  RRF    6D,W
0550:  MOVWF  7A
0551:  RRF    6C,W
0552:  MOVWF  79
0553:  MOVWF  6E
0554:  MOVF   66,W
0555:  MOVWF  04
0556:  BCF    03.7
0557:  BTFSC  67.0
0558:  BSF    03.7
0559:  MOVF   6E,W
055A:  MOVWF  00
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
055B:  MOVF   61,W
055C:  MOVWF  65
055D:  MOVF   60,W
055E:  MOVWF  64
055F:  MOVF   5F,W
0560:  MOVWF  63
0561:  MOVF   5E,W
0562:  MOVWF  62
....................       y+=(x/y); 
0563:  MOVF   5D,W
0564:  MOVWF  6B
0565:  MOVF   5C,W
0566:  MOVWF  6A
0567:  MOVF   5B,W
0568:  MOVWF  69
0569:  MOVF   5A,W
056A:  MOVWF  68
056B:  MOVF   61,W
056C:  MOVWF  6F
056D:  MOVF   60,W
056E:  MOVWF  6E
056F:  MOVF   5F,W
0570:  MOVWF  6D
0571:  MOVF   5E,W
0572:  MOVWF  6C
0573:  BCF    03.5
0574:  CALL   12E
0575:  BCF    03.1
0576:  BSF    03.5
0577:  MOVF   61,W
0578:  BCF    03.5
0579:  BSF    03.6
057A:  MOVWF  13
057B:  BSF    03.5
057C:  BCF    03.6
057D:  MOVF   60,W
057E:  BCF    03.5
057F:  BSF    03.6
0580:  MOVWF  12
0581:  BSF    03.5
0582:  BCF    03.6
0583:  MOVF   5F,W
0584:  BCF    03.5
0585:  BSF    03.6
0586:  MOVWF  11
0587:  BSF    03.5
0588:  BCF    03.6
0589:  MOVF   5E,W
058A:  BCF    03.5
058B:  BSF    03.6
058C:  MOVWF  10
058D:  MOVF   7A,W
058E:  MOVWF  17
058F:  MOVF   79,W
0590:  MOVWF  16
0591:  MOVF   78,W
0592:  MOVWF  15
0593:  MOVF   77,W
0594:  MOVWF  14
0595:  BCF    03.6
0596:  CALL   252
0597:  MOVF   7A,W
0598:  BSF    03.5
0599:  MOVWF  61
059A:  MOVF   79,W
059B:  MOVWF  60
059C:  MOVF   78,W
059D:  MOVWF  5F
059E:  MOVF   77,W
059F:  MOVWF  5E
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
05A0:  MOVF   66,W
05A1:  MOVWF  04
05A2:  BCF    03.7
05A3:  BTFSC  67.0
05A4:  BSF    03.7
05A5:  DECF   00,F
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
05A6:  MOVF   65,W
05A7:  MOVWF  6B
05A8:  MOVF   64,W
05A9:  MOVWF  6A
05AA:  MOVF   63,W
05AB:  MOVWF  69
05AC:  MOVF   62,W
05AD:  MOVWF  68
05AE:  MOVF   61,W
05AF:  MOVWF  6F
05B0:  MOVF   60,W
05B1:  MOVWF  6E
05B2:  MOVF   5F,W
05B3:  MOVWF  6D
05B4:  MOVF   5E,W
05B5:  MOVWF  6C
05B6:  BCF    03.5
05B7:  CALL   398
05B8:  BTFSC  03.2
05B9:  GOTO   5BC
05BA:  BSF    03.5
05BB:  GOTO   55B
....................  
....................    return(res); 
05BC:  BSF    03.5
05BD:  MOVF   62,W
05BE:  MOVWF  77
05BF:  MOVF   63,W
05C0:  MOVWF  78
05C1:  MOVF   64,W
05C2:  MOVWF  79
05C3:  MOVF   65,W
05C4:  MOVWF  7A
05C5:  BCF    03.5
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "flex_lcd.c"  //Llamada a la libreria lcd.c 
.................... // flex_lcd.c 
....................  
.................... // Change these pins to fit your own board. 
....................  
.................... #define LCD_DB4 PIN_B1 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B6 
.................... #define LCD_DB7 PIN_B7 
....................  
.................... #define LCD_E PIN_A2 
.................... //#define LCD_RW PIN_A3 
.................... #define LCD_RS  PIN_A1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW 1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................   0xc, // Display on 
....................   1, // Clear display 
....................   6 // Increment cursor 
.................... }; 
....................  
....................  
.................... //------------------------------------- 
....................  
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................   // Note: !! converts an integer expression 
....................   // to a boolean (1 or 0). 
....................   output_bit(LCD_DB4, !!(nibble & 1)); 
*
0615:  BSF    03.5
0616:  BTFSC  6A.0
0617:  GOTO   61C
0618:  BCF    03.5
0619:  BCF    06.1
061A:  GOTO   61E
061B:  BSF    03.5
061C:  BCF    03.5
061D:  BSF    06.1
061E:  BSF    03.5
061F:  BCF    06.1
....................   output_bit(LCD_DB5, !!(nibble & 2)); 
0620:  BTFSC  6A.1
0621:  GOTO   626
0622:  BCF    03.5
0623:  BCF    06.4
0624:  GOTO   628
0625:  BSF    03.5
0626:  BCF    03.5
0627:  BSF    06.4
0628:  BSF    03.5
0629:  BCF    06.4
....................   output_bit(LCD_DB6, !!(nibble & 4)); 
062A:  BTFSC  6A.2
062B:  GOTO   630
062C:  BCF    03.5
062D:  BCF    06.6
062E:  GOTO   632
062F:  BSF    03.5
0630:  BCF    03.5
0631:  BSF    06.6
0632:  BSF    03.5
0633:  BCF    06.6
....................   output_bit(LCD_DB7, !!(nibble & 8)); 
0634:  BTFSC  6A.3
0635:  GOTO   63A
0636:  BCF    03.5
0637:  BCF    06.7
0638:  GOTO   63C
0639:  BSF    03.5
063A:  BCF    03.5
063B:  BSF    06.7
063C:  BSF    03.5
063D:  BCF    06.7
....................  
....................   delay_cycles(1); 
063E:  NOP
....................   output_high(LCD_E); 
063F:  BCF    05.2
0640:  BCF    03.5
0641:  BSF    05.2
....................   delay_cycles(2);// 2us 
0642:  GOTO   643
....................   output_low(LCD_E); 
0643:  BSF    03.5
0644:  BCF    05.2
0645:  BCF    03.5
0646:  BCF    05.2
.................... } 
0647:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine. For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
....................   int8 retval; 
....................   // Create bit variables so that we can easily set 
....................   // individual bits in the retval variable. 
....................   #bit retval_0 = retval.0 
....................   #bit retval_1 = retval.1 
....................   #bit retval_2 = retval.2 
....................   #bit retval_3 = retval.3 
....................  
....................   retval = 0; 
....................  
....................   output_high(LCD_E); 
....................   delay_cycles(1); 
....................  
....................   retval_0 = input(LCD_DB4); 
....................   retval_1 = input(LCD_DB5); 
....................   retval_2 = input(LCD_DB6); 
....................   retval_3 = input(LCD_DB7); 
....................  
....................   output_low(LCD_E); 
....................  
....................   return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
....................   int8 low; 
....................   int8 high; 
....................  
....................   output_high(LCD_RW); 
....................   delay_cycles(1); 
....................  
....................   high = lcd_read_nibble(); 
....................  
....................   low = lcd_read_nibble(); 
....................  
....................   return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
....................   output_low(LCD_RS); 
0648:  BSF    03.5
0649:  BCF    05.1
064A:  BCF    03.5
064B:  BCF    05.1
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
064C:  MOVLW  27
064D:  MOVWF  77
064E:  DECFSZ 77,F
064F:  GOTO   64E
0650:  GOTO   651
.................... #endif 
....................  
....................   if(address) 
0651:  BSF    03.5
0652:  MOVF   67,F
0653:  BTFSC  03.2
0654:  GOTO   65A
....................   output_high(LCD_RS); 
0655:  BCF    05.1
0656:  BCF    03.5
0657:  BSF    05.1
....................   else 
0658:  GOTO   65D
0659:  BSF    03.5
....................   output_low(LCD_RS); 
065A:  BCF    05.1
065B:  BCF    03.5
065C:  BCF    05.1
....................  
....................   delay_cycles(1); 
065D:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
065E:  BSF    03.5
065F:  BCF    05.2
0660:  BCF    03.5
0661:  BCF    05.2
....................  
....................   lcd_send_nibble(n >> 4); 
0662:  BSF    03.5
0663:  SWAPF  68,W
0664:  MOVWF  69
0665:  MOVLW  0F
0666:  ANDWF  69,F
0667:  MOVF   69,W
0668:  MOVWF  6A
0669:  BCF    03.5
066A:  CALL   615
....................   lcd_send_nibble(n & 0xf); 
066B:  BSF    03.5
066C:  MOVF   68,W
066D:  ANDLW  0F
066E:  MOVWF  69
066F:  MOVWF  6A
0670:  BCF    03.5
0671:  CALL   615
.................... } 
0672:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_init(void) 
.................... { 
....................   int8 i; 
....................  
....................   output_low(LCD_RS); 
*
09CD:  BSF    03.5
09CE:  BCF    05.1
09CF:  BCF    03.5
09D0:  BCF    05.1
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
09D1:  BSF    03.5
09D2:  BCF    05.2
09D3:  BCF    03.5
09D4:  BCF    05.2
09D5:  CLRF   29
09D6:  BTFSC  0B.7
09D7:  BSF    29.7
09D8:  BCF    0B.7
....................  
....................   delay_ms(15);//15ms 
09D9:  MOVLW  0F
09DA:  BSF    03.5
09DB:  MOVWF  63
09DC:  BCF    0A.3
09DD:  BCF    03.5
09DE:  CALL   084
09DF:  BSF    0A.3
09E0:  BTFSC  29.7
09E1:  BSF    0B.7
....................  
....................   for(i=0 ;i < 3; i++) 
09E2:  BSF    03.5
09E3:  CLRF   32
09E4:  MOVF   32,W
09E5:  SUBLW  02
09E6:  BTFSS  03.0
09E7:  GOTO   206
09E8:  BCF    03.5
09E9:  CLRF   29
09EA:  BTFSC  0B.7
09EB:  BSF    29.7
09EC:  BCF    0B.7
....................   { 
....................     lcd_send_nibble(0x03); 
09ED:  MOVLW  03
09EE:  BSF    03.5
09EF:  MOVWF  6A
09F0:  BCF    0A.3
09F1:  BCF    03.5
09F2:  CALL   615
09F3:  BSF    0A.3
09F4:  BTFSC  29.7
09F5:  BSF    0B.7
09F6:  CLRF   29
09F7:  BTFSC  0B.7
09F8:  BSF    29.7
09F9:  BCF    0B.7
....................     delay_ms(5);//5ms 
09FA:  MOVLW  05
09FB:  BSF    03.5
09FC:  MOVWF  63
09FD:  BCF    0A.3
09FE:  BCF    03.5
09FF:  CALL   084
0A00:  BSF    0A.3
0A01:  BTFSC  29.7
0A02:  BSF    0B.7
....................   } 
0A03:  BSF    03.5
0A04:  INCF   32,F
0A05:  GOTO   1E4
0A06:  BCF    03.5
0A07:  CLRF   29
0A08:  BTFSC  0B.7
0A09:  BSF    29.7
0A0A:  BCF    0B.7
....................  
....................   lcd_send_nibble(0x02); 
0A0B:  MOVLW  02
0A0C:  BSF    03.5
0A0D:  MOVWF  6A
0A0E:  BCF    0A.3
0A0F:  BCF    03.5
0A10:  CALL   615
0A11:  BSF    0A.3
0A12:  BTFSC  29.7
0A13:  BSF    0B.7
....................  
....................   for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0A14:  BSF    03.5
0A15:  CLRF   32
0A16:  MOVF   32,W
0A17:  SUBLW  03
0A18:  BTFSS  03.0
0A19:  GOTO   240
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A1A:  MOVF   32,W
0A1B:  BCF    0A.3
0A1C:  BCF    03.5
0A1D:  CALL   03D
0A1E:  BSF    0A.3
0A1F:  BSF    03.5
0A20:  MOVWF  33
0A21:  BCF    03.5
0A22:  CLRF   29
0A23:  BTFSC  0B.7
0A24:  BSF    29.7
0A25:  BCF    0B.7
0A26:  BSF    03.5
0A27:  CLRF   67
0A28:  MOVF   33,W
0A29:  MOVWF  68
0A2A:  BCF    0A.3
0A2B:  BCF    03.5
0A2C:  CALL   648
0A2D:  BSF    0A.3
0A2E:  BTFSC  29.7
0A2F:  BSF    0B.7
0A30:  CLRF   29
0A31:  BTFSC  0B.7
0A32:  BSF    29.7
0A33:  BCF    0B.7
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled. One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
.................... #ifndef USE_LCD_RW 
.................... delay_ms(5); 
0A34:  MOVLW  05
0A35:  BSF    03.5
0A36:  MOVWF  63
0A37:  BCF    0A.3
0A38:  BCF    03.5
0A39:  CALL   084
0A3A:  BSF    0A.3
0A3B:  BTFSC  29.7
0A3C:  BSF    0B.7
.................... #endif 
.................... } 
0A3D:  BSF    03.5
0A3E:  INCF   32,F
0A3F:  GOTO   216
....................  
.................... } 
0A40:  BCF    03.5
0A41:  BSF    0A.3
0A42:  GOTO   526 (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
....................   int8 address; 
....................  
....................   if(y != 1) 
*
0673:  BSF    03.5
0674:  DECFSZ 64,W
0675:  GOTO   677
0676:  GOTO   67A
....................   address = lcd_line_two; 
0677:  MOVLW  40
0678:  MOVWF  65
....................   else 
0679:  GOTO   67B
....................   address=0; 
067A:  CLRF   65
....................  
....................   address += x-1; 
067B:  MOVLW  01
067C:  SUBWF  63,W
067D:  ADDWF  65,F
....................   lcd_send_byte(0, 0x80 | address); 
067E:  MOVF   65,W
067F:  IORLW  80
0680:  MOVWF  66
0681:  CLRF   67
0682:  MOVF   66,W
0683:  MOVWF  68
0684:  BCF    03.5
0685:  CALL   648
.................... } 
0686:  RETLW  00
....................  
.................... //----------------------------- 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................   switch(c) 
....................   { 
0687:  BSF    03.5
0688:  MOVF   62,W
0689:  XORLW  0C
068A:  BCF    03.5
068B:  BTFSC  03.2
068C:  GOTO   694
068D:  XORLW  06
068E:  BTFSC  03.2
068F:  GOTO   6A0
0690:  XORLW  02
0691:  BTFSC  03.2
0692:  GOTO   6A8
0693:  GOTO   6AF
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0694:  BSF    03.5
0695:  CLRF   67
0696:  MOVLW  01
0697:  MOVWF  68
0698:  BCF    03.5
0699:  CALL   648
....................       delay_ms(2);//2ms 
069A:  MOVLW  02
069B:  BSF    03.5
069C:  MOVWF  63
069D:  BCF    03.5
069E:  CALL   084
....................       break; 
069F:  GOTO   6B7
....................  
....................     case '\n': 
....................       lcd_gotoxy(1,2); 
06A0:  MOVLW  01
06A1:  BSF    03.5
06A2:  MOVWF  63
06A3:  MOVLW  02
06A4:  MOVWF  64
06A5:  BCF    03.5
06A6:  CALL   673
....................       break; 
06A7:  GOTO   6B7
....................  
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
06A8:  BSF    03.5
06A9:  CLRF   67
06AA:  MOVLW  10
06AB:  MOVWF  68
06AC:  BCF    03.5
06AD:  CALL   648
....................       break; 
06AE:  GOTO   6B7
....................  
....................     default: 
....................       lcd_send_byte(1,c); 
06AF:  MOVLW  01
06B0:  BSF    03.5
06B1:  MOVWF  67
06B2:  MOVF   62,W
06B3:  MOVWF  68
06B4:  BCF    03.5
06B5:  CALL   648
....................       break; 
06B6:  GOTO   6B7
....................   } 
.................... } 
06B7:  RETLW  00
....................  
.................... void lcd_comand(int d) 
.................... { 
.................... lcd_send_byte(0,d); 
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
....................   char value; 
....................  
....................   lcd_gotoxy(x,y); 
....................  
....................   // Wait until busy flag is low. 
....................   while(bit_test(lcd_read_byte(),7)); 
....................  
....................   output_high(LCD_RS); 
....................   value = lcd_read_byte(); 
....................   output_low(lcd_RS); 
....................  
....................   return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
.................... #use rs232(baud=9600,BITS =8,PARITY=N, xmit=PIN_B5, rcv=PIN_B2, stream=HOSTPC,errors) 
*
006F:  BTFSS  0C.5
0070:  GOTO   06F
0071:  MOVF   18,W
0072:  MOVWF  2A
0073:  MOVF   1A,W
0074:  MOVWF  78
0075:  BTFSS  2A.1
0076:  GOTO   079
0077:  BCF    18.4
0078:  BSF    18.4
.................... unsigned int contRTCC=0,set_point=60; 
*
0CB2:  CLRF   2B
0CB3:  MOVLW  3C
0CB4:  MOVWF  2C
.................... float LSB=0.004882,y,rtdv,rtdr; 
0CB5:  MOVLW  77
0CB6:  MOVWF  2D
0CB7:  MOVLW  1F
0CB8:  MOVWF  2E
0CB9:  MOVLW  F9
0CBA:  MOVWF  2F
0CBB:  MOVLW  2F
0CBC:  MOVWF  30
.................... float a=9.53,b=0.918/0.9,rkt,ekt,pkt,qkt,ukt,MA=1000.0,MI=0.0,pkt_1=0.0,ekt_1=0.0; 
0CBD:  MOVLW  82
0CBE:  MOVWF  3D
0CBF:  MOVLW  18
0CC0:  MOVWF  3E
0CC1:  MOVLW  7A
0CC2:  MOVWF  3F
0CC3:  MOVLW  E1
0CC4:  MOVWF  40
0CC5:  MOVLW  7F
0CC6:  MOVWF  41
0CC7:  MOVLW  02
0CC8:  MOVWF  42
0CC9:  MOVLW  8F
0CCA:  MOVWF  43
0CCB:  MOVLW  5C
0CCC:  MOVWF  44
0CCD:  MOVLW  88
0CCE:  MOVWF  59
0CCF:  MOVLW  7A
0CD0:  MOVWF  5A
0CD1:  CLRF   5B
0CD2:  CLRF   5C
0CD3:  CLRF   5D
0CD4:  CLRF   5E
0CD5:  CLRF   5F
0CD6:  CLRF   60
0CD7:  CLRF   61
0CD8:  CLRF   62
0CD9:  CLRF   63
0CDA:  CLRF   64
0CDB:  CLRF   65
0CDC:  CLRF   66
0CDD:  CLRF   67
0CDE:  CLRF   68
.................... int16 valor,Control,Duty; 
.................... float temp1,Ptemp[4],D; 
.................... int datoTX[2]; 
.................... short val=0; 
0CDF:  BCF    7E.0
.................... char c; 
....................  
.................... //T=(4/fosc * PREESCALER )(256-Carga en el timer)   T-> tiempo de desborde del timer. 
....................  
.................... //INTERRUPCION RDA RECEPCION DE DATOS SERIE 
.................... #int_RDA 
.................... VOID RDA_ISR(VOID) 
.................... { 
.................... c=getc(); 
*
0079:  MOVF   78,W
007A:  BSF    03.5
007B:  MOVWF  30
.................... PUTC(C); 
007C:  MOVF   30,W
007D:  BCF    03.5
007E:  BTFSS  0C.4
007F:  GOTO   07E
0080:  MOVWF  19
.................... } 
....................  
....................  
....................  
.................... //ENVIO DE DATOS SERIE 
0081:  BCF    0C.5
0082:  BCF    0A.3
0083:  GOTO   026
.................... void envioUART(int16 ADC){ 
....................    datoTX[0]=ADC >> 8;     //Asignacion de desplazamiento hacia la derecha                                             
*
0C89:  BSF    03.5
0C8A:  MOVF   33,W
0C8B:  MOVWF  7C
....................    datoTX[1]=ADC & 0xFF;   //Asignacion AND de Bits   
0C8C:  MOVF   32,W
0C8D:  MOVWF  7D
....................    putc(datoTX[0]);            
0C8E:  MOVF   7C,W
0C8F:  BCF    03.5
0C90:  BTFSS  0C.4
0C91:  GOTO   490
0C92:  MOVWF  19
....................    putc(datoTX[1]);          //Envio de Datos  
0C93:  MOVF   7D,W
0C94:  BTFSS  0C.4
0C95:  GOTO   494
0C96:  MOVWF  19
.................... } 
0C97:  BSF    0A.3
0C98:  GOTO   664 (RETURN)
....................  
.................... float calculos_rtd(int16 ADC) { 
....................                 float temp; 
.................... rtdv=(ADC*LSB)/48.40;                    /* Calculate volt rtdr  */ 
*
0425:  BSF    03.5
0426:  MOVF   55,W
0427:  MOVWF  5B
0428:  MOVF   54,W
0429:  MOVWF  5A
042A:  BCF    03.5
042B:  CALL   098
042C:  MOVF   7A,W
042D:  BSF    03.5
042E:  MOVWF  65
042F:  MOVF   79,W
0430:  MOVWF  64
0431:  MOVF   78,W
0432:  MOVWF  63
0433:  MOVF   77,W
0434:  MOVWF  62
0435:  BCF    03.5
0436:  MOVF   30,W
0437:  BSF    03.5
0438:  MOVWF  69
0439:  BCF    03.5
043A:  MOVF   2F,W
043B:  BSF    03.5
043C:  MOVWF  68
043D:  BCF    03.5
043E:  MOVF   2E,W
043F:  BSF    03.5
0440:  MOVWF  67
0441:  BCF    03.5
0442:  MOVF   2D,W
0443:  BSF    03.5
0444:  MOVWF  66
0445:  BCF    03.5
0446:  CALL   0B7
0447:  MOVF   77,W
0448:  BSF    03.5
0449:  MOVWF  5A
044A:  MOVF   78,W
044B:  MOVWF  5B
044C:  MOVF   79,W
044D:  MOVWF  5C
044E:  MOVF   7A,W
044F:  MOVWF  5D
0450:  MOVWF  6B
0451:  MOVF   5C,W
0452:  MOVWF  6A
0453:  MOVF   5B,W
0454:  MOVWF  69
0455:  MOVF   5A,W
0456:  MOVWF  68
0457:  MOVLW  9A
0458:  MOVWF  6F
0459:  MOVLW  99
045A:  MOVWF  6E
045B:  MOVLW  41
045C:  MOVWF  6D
045D:  MOVLW  84
045E:  MOVWF  6C
045F:  BCF    03.5
0460:  CALL   12E
0461:  MOVF   7A,W
0462:  MOVWF  38
0463:  MOVF   79,W
0464:  MOVWF  37
0465:  MOVF   78,W
0466:  MOVWF  36
0467:  MOVF   77,W
0468:  MOVWF  35
.................... rtdr = (rtdv*10000.0)/(5.0-rtdv);          /* Calculate RTD resistance rtdr  */  
0469:  MOVF   38,W
046A:  BSF    03.5
046B:  MOVWF  65
046C:  BCF    03.5
046D:  MOVF   37,W
046E:  BSF    03.5
046F:  MOVWF  64
0470:  BCF    03.5
0471:  MOVF   36,W
0472:  BSF    03.5
0473:  MOVWF  63
0474:  BCF    03.5
0475:  MOVF   35,W
0476:  BSF    03.5
0477:  MOVWF  62
0478:  CLRF   69
0479:  MOVLW  40
047A:  MOVWF  68
047B:  MOVLW  1C
047C:  MOVWF  67
047D:  MOVLW  8C
047E:  MOVWF  66
047F:  BCF    03.5
0480:  CALL   0B7
0481:  MOVF   77,W
0482:  BSF    03.5
0483:  MOVWF  5A
0484:  MOVF   78,W
0485:  MOVWF  5B
0486:  MOVF   79,W
0487:  MOVWF  5C
0488:  MOVF   7A,W
0489:  MOVWF  5D
048A:  BSF    03.1
048B:  BCF    03.5
048C:  BSF    03.6
048D:  CLRF   13
048E:  CLRF   12
048F:  MOVLW  20
0490:  MOVWF  11
0491:  MOVLW  81
0492:  MOVWF  10
0493:  BCF    03.6
0494:  MOVF   38,W
0495:  BSF    03.6
0496:  MOVWF  17
0497:  BCF    03.6
0498:  MOVF   37,W
0499:  BSF    03.6
049A:  MOVWF  16
049B:  BCF    03.6
049C:  MOVF   36,W
049D:  BSF    03.6
049E:  MOVWF  15
049F:  BCF    03.6
04A0:  MOVF   35,W
04A1:  BSF    03.6
04A2:  MOVWF  14
04A3:  BCF    03.6
04A4:  CALL   252
04A5:  BSF    03.5
04A6:  MOVF   5D,W
04A7:  MOVWF  6B
04A8:  MOVF   5C,W
04A9:  MOVWF  6A
04AA:  MOVF   5B,W
04AB:  MOVWF  69
04AC:  MOVF   5A,W
04AD:  MOVWF  68
04AE:  MOVF   7A,W
04AF:  MOVWF  6F
04B0:  MOVF   79,W
04B1:  MOVWF  6E
04B2:  MOVF   78,W
04B3:  MOVWF  6D
04B4:  MOVF   77,W
04B5:  MOVWF  6C
04B6:  BCF    03.5
04B7:  CALL   12E
04B8:  MOVF   7A,W
04B9:  MOVWF  3C
04BA:  MOVF   79,W
04BB:  MOVWF  3B
04BC:  MOVF   78,W
04BD:  MOVWF  3A
04BE:  MOVF   77,W
04BF:  MOVWF  39
.................... y = (0.15274) - ((rtdr-100.0)*(2310.0e-7));  
04C0:  BSF    03.1
04C1:  MOVF   3C,W
04C2:  BSF    03.6
04C3:  MOVWF  13
04C4:  BCF    03.6
04C5:  MOVF   3B,W
04C6:  BSF    03.6
04C7:  MOVWF  12
04C8:  BCF    03.6
04C9:  MOVF   3A,W
04CA:  BSF    03.6
04CB:  MOVWF  11
04CC:  BCF    03.6
04CD:  MOVF   39,W
04CE:  BSF    03.6
04CF:  MOVWF  10
04D0:  CLRF   17
04D1:  CLRF   16
04D2:  MOVLW  48
04D3:  MOVWF  15
04D4:  MOVLW  85
04D5:  MOVWF  14
04D6:  BCF    03.6
04D7:  CALL   252
04D8:  MOVF   77,W
04D9:  BSF    03.5
04DA:  MOVWF  5A
04DB:  MOVF   78,W
04DC:  MOVWF  5B
04DD:  MOVF   79,W
04DE:  MOVWF  5C
04DF:  MOVF   7A,W
04E0:  MOVWF  5D
04E1:  MOVWF  65
04E2:  MOVF   5C,W
04E3:  MOVWF  64
04E4:  MOVF   5B,W
04E5:  MOVWF  63
04E6:  MOVF   5A,W
04E7:  MOVWF  62
04E8:  MOVLW  97
04E9:  MOVWF  69
04EA:  MOVLW  38
04EB:  MOVWF  68
04EC:  MOVLW  72
04ED:  MOVWF  67
04EE:  MOVWF  66
04EF:  BCF    03.5
04F0:  CALL   0B7
04F1:  BSF    03.1
04F2:  MOVLW  E0
04F3:  BSF    03.6
04F4:  MOVWF  13
04F5:  MOVLW  67
04F6:  MOVWF  12
04F7:  MOVLW  1C
04F8:  MOVWF  11
04F9:  MOVLW  7C
04FA:  MOVWF  10
04FB:  MOVF   7A,W
04FC:  MOVWF  17
04FD:  MOVF   79,W
04FE:  MOVWF  16
04FF:  MOVF   78,W
0500:  MOVWF  15
0501:  MOVF   77,W
0502:  MOVWF  14
0503:  BCF    03.6
0504:  CALL   252
0505:  MOVF   7A,W
0506:  MOVWF  34
0507:  MOVF   79,W
0508:  MOVWF  33
0509:  MOVF   78,W
050A:  MOVWF  32
050B:  MOVF   77,W
050C:  MOVWF  31
.................... y = sqrt(y) ; 
050D:  MOVF   34,W
050E:  BSF    03.5
050F:  MOVWF  5D
0510:  BCF    03.5
0511:  MOVF   33,W
0512:  BSF    03.5
0513:  MOVWF  5C
0514:  BCF    03.5
0515:  MOVF   32,W
0516:  BSF    03.5
0517:  MOVWF  5B
0518:  BCF    03.5
0519:  MOVF   31,W
051A:  BSF    03.5
051B:  MOVWF  5A
*
05C6:  MOVF   7A,W
05C7:  MOVWF  34
05C8:  MOVF   79,W
05C9:  MOVWF  33
05CA:  MOVF   78,W
05CB:  MOVWF  32
05CC:  MOVF   77,W
05CD:  MOVWF  31
.................... temp = (y-0.39083)/(-0.0001155); 
05CE:  BSF    03.1
05CF:  MOVF   34,W
05D0:  BSF    03.6
05D1:  MOVWF  13
05D2:  BCF    03.6
05D3:  MOVF   33,W
05D4:  BSF    03.6
05D5:  MOVWF  12
05D6:  BCF    03.6
05D7:  MOVF   32,W
05D8:  BSF    03.6
05D9:  MOVWF  11
05DA:  BCF    03.6
05DB:  MOVF   31,W
05DC:  BSF    03.6
05DD:  MOVWF  10
05DE:  MOVLW  DF
05DF:  MOVWF  17
05E0:  MOVLW  1A
05E1:  MOVWF  16
05E2:  MOVLW  48
05E3:  MOVWF  15
05E4:  MOVLW  7D
05E5:  MOVWF  14
05E6:  BCF    03.6
05E7:  CALL   252
05E8:  MOVF   77,W
05E9:  BSF    03.5
05EA:  MOVWF  5A
05EB:  MOVF   78,W
05EC:  MOVWF  5B
05ED:  MOVF   79,W
05EE:  MOVWF  5C
05EF:  MOVF   7A,W
05F0:  MOVWF  5D
05F1:  MOVWF  6B
05F2:  MOVF   5C,W
05F3:  MOVWF  6A
05F4:  MOVF   5B,W
05F5:  MOVWF  69
05F6:  MOVF   5A,W
05F7:  MOVWF  68
05F8:  MOVLW  97
05F9:  MOVWF  6F
05FA:  MOVLW  38
05FB:  MOVWF  6E
05FC:  MOVLW  F2
05FD:  MOVWF  6D
05FE:  MOVLW  71
05FF:  MOVWF  6C
0600:  BCF    03.5
0601:  CALL   12E
0602:  MOVF   7A,W
0603:  BSF    03.5
0604:  MOVWF  59
0605:  MOVF   79,W
0606:  MOVWF  58
0607:  MOVF   78,W
0608:  MOVWF  57
0609:  MOVF   77,W
060A:  MOVWF  56
....................     return temp; 
060B:  MOVF   56,W
060C:  MOVWF  77
060D:  MOVF   57,W
060E:  MOVWF  78
060F:  MOVF   58,W
0610:  MOVWF  79
0611:  MOVF   59,W
0612:  MOVWF  7A
.................... } 
0613:  BCF    03.5
0614:  RETLW  00
....................  
.................... float calculos_pid(float temp) { 
*
0A43:  CLRF   29
0A44:  BTFSC  0B.7
0A45:  BSF    29.7
0A46:  BCF    0B.7
.................... float duty; 
.................... rkt=set_point; 
0A47:  BSF    03.5
0A48:  CLRF   5B
0A49:  BCF    03.5
0A4A:  MOVF   2C,W
0A4B:  BSF    03.5
0A4C:  MOVWF  5A
0A4D:  BCF    0A.3
0A4E:  BCF    03.5
0A4F:  CALL   098
0A50:  BSF    0A.3
0A51:  BTFSC  29.7
0A52:  BSF    0B.7
0A53:  MOVF   7A,W
0A54:  MOVWF  48
0A55:  MOVF   79,W
0A56:  MOVWF  47
0A57:  MOVF   78,W
0A58:  MOVWF  46
0A59:  MOVF   77,W
0A5A:  MOVWF  45
....................  
....................   /* Calculate error */ 
....................   ekt=rkt-temp; 
0A5B:  BSF    03.1
0A5C:  CLRF   29
0A5D:  BTFSC  0B.7
0A5E:  BSF    29.7
0A5F:  BCF    0B.7
0A60:  MOVF   48,W
0A61:  BSF    03.6
0A62:  MOVWF  13
0A63:  BCF    03.6
0A64:  MOVF   47,W
0A65:  BSF    03.6
0A66:  MOVWF  12
0A67:  BCF    03.6
0A68:  MOVF   46,W
0A69:  BSF    03.6
0A6A:  MOVWF  11
0A6B:  BCF    03.6
0A6C:  MOVF   45,W
0A6D:  BSF    03.6
0A6E:  MOVWF  10
0A6F:  BSF    03.5
0A70:  BCF    03.6
0A71:  MOVF   35,W
0A72:  BCF    03.5
0A73:  BSF    03.6
0A74:  MOVWF  17
0A75:  BSF    03.5
0A76:  BCF    03.6
0A77:  MOVF   34,W
0A78:  BCF    03.5
0A79:  BSF    03.6
0A7A:  MOVWF  16
0A7B:  BSF    03.5
0A7C:  BCF    03.6
0A7D:  MOVF   33,W
0A7E:  BCF    03.5
0A7F:  BSF    03.6
0A80:  MOVWF  15
0A81:  BSF    03.5
0A82:  BCF    03.6
0A83:  MOVF   32,W
0A84:  BCF    03.5
0A85:  BSF    03.6
0A86:  MOVWF  14
0A87:  BCF    0A.3
0A88:  BCF    03.6
0A89:  CALL   252
0A8A:  BSF    0A.3
0A8B:  BTFSC  29.7
0A8C:  BSF    0B.7
0A8D:  MOVF   7A,W
0A8E:  MOVWF  4C
0A8F:  MOVF   79,W
0A90:  MOVWF  4B
0A91:  MOVF   78,W
0A92:  MOVWF  4A
0A93:  MOVF   77,W
0A94:  MOVWF  49
0A95:  CLRF   29
0A96:  BTFSC  0B.7
0A97:  BSF    29.7
0A98:  BCF    0B.7
....................   /*end  Calculate error */ 
....................  
....................   /* Calculate I term */ 
....................   pkt=b*ekt+pkt_1; 
0A99:  MOVF   44,W
0A9A:  BSF    03.5
0A9B:  MOVWF  65
0A9C:  BCF    03.5
0A9D:  MOVF   43,W
0A9E:  BSF    03.5
0A9F:  MOVWF  64
0AA0:  BCF    03.5
0AA1:  MOVF   42,W
0AA2:  BSF    03.5
0AA3:  MOVWF  63
0AA4:  BCF    03.5
0AA5:  MOVF   41,W
0AA6:  BSF    03.5
0AA7:  MOVWF  62
0AA8:  BCF    03.5
0AA9:  MOVF   4C,W
0AAA:  BSF    03.5
0AAB:  MOVWF  69
0AAC:  BCF    03.5
0AAD:  MOVF   4B,W
0AAE:  BSF    03.5
0AAF:  MOVWF  68
0AB0:  BCF    03.5
0AB1:  MOVF   4A,W
0AB2:  BSF    03.5
0AB3:  MOVWF  67
0AB4:  BCF    03.5
0AB5:  MOVF   49,W
0AB6:  BSF    03.5
0AB7:  MOVWF  66
0AB8:  BCF    0A.3
0AB9:  BCF    03.5
0ABA:  CALL   0B7
0ABB:  BSF    0A.3
0ABC:  BTFSC  29.7
0ABD:  BSF    0B.7
0ABE:  MOVF   77,W
0ABF:  BSF    03.5
0AC0:  MOVWF  3A
0AC1:  MOVF   78,W
0AC2:  MOVWF  3B
0AC3:  MOVF   79,W
0AC4:  MOVWF  3C
0AC5:  MOVF   7A,W
0AC6:  MOVWF  3D
0AC7:  BCF    03.1
0AC8:  BCF    03.5
0AC9:  CLRF   29
0ACA:  BTFSC  0B.7
0ACB:  BSF    29.7
0ACC:  BCF    0B.7
0ACD:  BSF    03.5
0ACE:  MOVF   3D,W
0ACF:  BCF    03.5
0AD0:  BSF    03.6
0AD1:  MOVWF  13
0AD2:  BSF    03.5
0AD3:  BCF    03.6
0AD4:  MOVF   3C,W
0AD5:  BCF    03.5
0AD6:  BSF    03.6
0AD7:  MOVWF  12
0AD8:  BSF    03.5
0AD9:  BCF    03.6
0ADA:  MOVF   3B,W
0ADB:  BCF    03.5
0ADC:  BSF    03.6
0ADD:  MOVWF  11
0ADE:  BSF    03.5
0ADF:  BCF    03.6
0AE0:  MOVF   3A,W
0AE1:  BCF    03.5
0AE2:  BSF    03.6
0AE3:  MOVWF  10
0AE4:  BCF    03.6
0AE5:  MOVF   64,W
0AE6:  BSF    03.6
0AE7:  MOVWF  17
0AE8:  BCF    03.6
0AE9:  MOVF   63,W
0AEA:  BSF    03.6
0AEB:  MOVWF  16
0AEC:  BCF    03.6
0AED:  MOVF   62,W
0AEE:  BSF    03.6
0AEF:  MOVWF  15
0AF0:  BCF    03.6
0AF1:  MOVF   61,W
0AF2:  BSF    03.6
0AF3:  MOVWF  14
0AF4:  BCF    0A.3
0AF5:  BCF    03.6
0AF6:  CALL   252
0AF7:  BSF    0A.3
0AF8:  BTFSC  29.7
0AF9:  BSF    0B.7
0AFA:  MOVF   7A,W
0AFB:  MOVWF  50
0AFC:  MOVF   79,W
0AFD:  MOVWF  4F
0AFE:  MOVF   78,W
0AFF:  MOVWF  4E
0B00:  MOVF   77,W
0B01:  MOVWF  4D
0B02:  CLRF   29
0B03:  BTFSC  0B.7
0B04:  BSF    29.7
0B05:  BCF    0B.7
....................   /*end  Calculate I term */ 
....................  
....................   /* Calculate PI output */ 
....................    ukt=pkt+a*ekt; 
0B06:  MOVF   40,W
0B07:  BSF    03.5
0B08:  MOVWF  65
0B09:  BCF    03.5
0B0A:  MOVF   3F,W
0B0B:  BSF    03.5
0B0C:  MOVWF  64
0B0D:  BCF    03.5
0B0E:  MOVF   3E,W
0B0F:  BSF    03.5
0B10:  MOVWF  63
0B11:  BCF    03.5
0B12:  MOVF   3D,W
0B13:  BSF    03.5
0B14:  MOVWF  62
0B15:  BCF    03.5
0B16:  MOVF   4C,W
0B17:  BSF    03.5
0B18:  MOVWF  69
0B19:  BCF    03.5
0B1A:  MOVF   4B,W
0B1B:  BSF    03.5
0B1C:  MOVWF  68
0B1D:  BCF    03.5
0B1E:  MOVF   4A,W
0B1F:  BSF    03.5
0B20:  MOVWF  67
0B21:  BCF    03.5
0B22:  MOVF   49,W
0B23:  BSF    03.5
0B24:  MOVWF  66
0B25:  BCF    0A.3
0B26:  BCF    03.5
0B27:  CALL   0B7
0B28:  BSF    0A.3
0B29:  BTFSC  29.7
0B2A:  BSF    0B.7
0B2B:  BCF    03.1
0B2C:  CLRF   29
0B2D:  BTFSC  0B.7
0B2E:  BSF    29.7
0B2F:  BCF    0B.7
0B30:  MOVF   50,W
0B31:  BSF    03.6
0B32:  MOVWF  13
0B33:  BCF    03.6
0B34:  MOVF   4F,W
0B35:  BSF    03.6
0B36:  MOVWF  12
0B37:  BCF    03.6
0B38:  MOVF   4E,W
0B39:  BSF    03.6
0B3A:  MOVWF  11
0B3B:  BCF    03.6
0B3C:  MOVF   4D,W
0B3D:  BSF    03.6
0B3E:  MOVWF  10
0B3F:  MOVF   7A,W
0B40:  MOVWF  17
0B41:  MOVF   79,W
0B42:  MOVWF  16
0B43:  MOVF   78,W
0B44:  MOVWF  15
0B45:  MOVF   77,W
0B46:  MOVWF  14
0B47:  BCF    0A.3
0B48:  BCF    03.6
0B49:  CALL   252
0B4A:  BSF    0A.3
0B4B:  BTFSC  29.7
0B4C:  BSF    0B.7
0B4D:  MOVF   7A,W
0B4E:  MOVWF  58
0B4F:  MOVF   79,W
0B50:  MOVWF  57
0B51:  MOVF   78,W
0B52:  MOVWF  56
0B53:  MOVF   77,W
0B54:  MOVWF  55
0B55:  CLRF   29
0B56:  BTFSC  0B.7
0B57:  BSF    29.7
0B58:  BCF    0B.7
....................   /*end Calculate PI output */ 
....................  
....................   if(ukt > MA) { 
0B59:  MOVF   5C,W
0B5A:  BSF    03.5
0B5B:  MOVWF  6B
0B5C:  BCF    03.5
0B5D:  MOVF   5B,W
0B5E:  BSF    03.5
0B5F:  MOVWF  6A
0B60:  BCF    03.5
0B61:  MOVF   5A,W
0B62:  BSF    03.5
0B63:  MOVWF  69
0B64:  BCF    03.5
0B65:  MOVF   59,W
0B66:  BSF    03.5
0B67:  MOVWF  68
0B68:  BCF    03.5
0B69:  MOVF   58,W
0B6A:  BSF    03.5
0B6B:  MOVWF  6F
0B6C:  BCF    03.5
0B6D:  MOVF   57,W
0B6E:  BSF    03.5
0B6F:  MOVWF  6E
0B70:  BCF    03.5
0B71:  MOVF   56,W
0B72:  BSF    03.5
0B73:  MOVWF  6D
0B74:  BCF    03.5
0B75:  MOVF   55,W
0B76:  BSF    03.5
0B77:  MOVWF  6C
0B78:  BCF    0A.3
0B79:  BCF    03.5
0B7A:  CALL   398
0B7B:  BSF    0A.3
0B7C:  BTFSC  29.7
0B7D:  BSF    0B.7
0B7E:  BTFSS  03.0
0B7F:  GOTO   391
....................   pkt=pkt_1; 
0B80:  MOVF   64,W
0B81:  MOVWF  50
0B82:  MOVF   63,W
0B83:  MOVWF  4F
0B84:  MOVF   62,W
0B85:  MOVWF  4E
0B86:  MOVF   61,W
0B87:  MOVWF  4D
....................   ukt =MA;     } 
0B88:  MOVF   5C,W
0B89:  MOVWF  58
0B8A:  MOVF   5B,W
0B8B:  MOVWF  57
0B8C:  MOVF   5A,W
0B8D:  MOVWF  56
0B8E:  MOVF   59,W
0B8F:  MOVWF  55
....................   else if(ukt < MI) 
0B90:  GOTO   3CC
0B91:  CLRF   29
0B92:  BTFSC  0B.7
0B93:  BSF    29.7
0B94:  BCF    0B.7
0B95:  MOVF   58,W
0B96:  BSF    03.5
0B97:  MOVWF  6B
0B98:  BCF    03.5
0B99:  MOVF   57,W
0B9A:  BSF    03.5
0B9B:  MOVWF  6A
0B9C:  BCF    03.5
0B9D:  MOVF   56,W
0B9E:  BSF    03.5
0B9F:  MOVWF  69
0BA0:  BCF    03.5
0BA1:  MOVF   55,W
0BA2:  BSF    03.5
0BA3:  MOVWF  68
0BA4:  BCF    03.5
0BA5:  MOVF   60,W
0BA6:  BSF    03.5
0BA7:  MOVWF  6F
0BA8:  BCF    03.5
0BA9:  MOVF   5F,W
0BAA:  BSF    03.5
0BAB:  MOVWF  6E
0BAC:  BCF    03.5
0BAD:  MOVF   5E,W
0BAE:  BSF    03.5
0BAF:  MOVWF  6D
0BB0:  BCF    03.5
0BB1:  MOVF   5D,W
0BB2:  BSF    03.5
0BB3:  MOVWF  6C
0BB4:  BCF    0A.3
0BB5:  BCF    03.5
0BB6:  CALL   398
0BB7:  BSF    0A.3
0BB8:  BTFSC  29.7
0BB9:  BSF    0B.7
0BBA:  BTFSS  03.0
0BBB:  GOTO   3CC
....................   { pkt=pkt_1; 
0BBC:  MOVF   64,W
0BBD:  MOVWF  50
0BBE:  MOVF   63,W
0BBF:  MOVWF  4F
0BC0:  MOVF   62,W
0BC1:  MOVWF  4E
0BC2:  MOVF   61,W
0BC3:  MOVWF  4D
....................   ukt=MI;      } 
0BC4:  MOVF   60,W
0BC5:  MOVWF  58
0BC6:  MOVF   5F,W
0BC7:  MOVWF  57
0BC8:  MOVF   5E,W
0BC9:  MOVWF  56
0BCA:  MOVF   5D,W
0BCB:  MOVWF  55
....................  
....................   duty=ukt; 
0BCC:  MOVF   58,W
0BCD:  BSF    03.5
0BCE:  MOVWF  39
0BCF:  BCF    03.5
0BD0:  MOVF   57,W
0BD1:  BSF    03.5
0BD2:  MOVWF  38
0BD3:  BCF    03.5
0BD4:  MOVF   56,W
0BD5:  BSF    03.5
0BD6:  MOVWF  37
0BD7:  BCF    03.5
0BD8:  MOVF   55,W
0BD9:  BSF    03.5
0BDA:  MOVWF  36
....................  
....................   pkt_1 = pkt ; 
0BDB:  BCF    03.5
0BDC:  MOVF   50,W
0BDD:  MOVWF  64
0BDE:  MOVF   4F,W
0BDF:  MOVWF  63
0BE0:  MOVF   4E,W
0BE1:  MOVWF  62
0BE2:  MOVF   4D,W
0BE3:  MOVWF  61
....................   ekt_1= ekt; 
0BE4:  MOVF   4C,W
0BE5:  MOVWF  68
0BE6:  MOVF   4B,W
0BE7:  MOVWF  67
0BE8:  MOVF   4A,W
0BE9:  MOVWF  66
0BEA:  MOVF   49,W
0BEB:  MOVWF  65
....................                  
....................     return duty;         
0BEC:  BSF    03.5
0BED:  MOVF   36,W
0BEE:  MOVWF  77
0BEF:  MOVF   37,W
0BF0:  MOVWF  78
0BF1:  MOVF   38,W
0BF2:  MOVWF  79
0BF3:  MOVF   39,W
0BF4:  MOVWF  7A
.................... } 
0BF5:  BCF    03.5
0BF6:  RETLW  00
....................  
....................  
.................... #int_timer0 
.................... void int_tiempo0(void){ 
.................... ++contRTCC; 
*
0800:  INCF   2B,F
.................... if(contRTCC==10){ 
0801:  MOVF   2B,W
0802:  SUBLW  0A
0803:  BTFSS  03.2
0804:  GOTO   02E
.................... output_high(pin_a0); 
0805:  BSF    03.5
0806:  BCF    05.0
0807:  BCF    03.5
0808:  BSF    05.0
.................... delay_ms(10); 
0809:  MOVLW  0A
080A:  BSF    03.5
080B:  MOVWF  63
080C:  BCF    0A.3
080D:  BCF    03.5
080E:  CALL   084
080F:  BSF    0A.3
.................... valor=read_adc(); 
0810:  BSF    1F.2
0811:  BTFSC  1F.2
0812:  GOTO   011
0813:  BSF    03.5
0814:  MOVF   1E,W
0815:  BCF    03.5
0816:  MOVWF  69
0817:  MOVF   1E,W
0818:  MOVWF  6A
.................... Ptemp[0]=calculos_rtd(valor); 
0819:  MOVF   6A,W
081A:  BSF    03.5
081B:  MOVWF  55
081C:  BCF    03.5
081D:  MOVF   69,W
081E:  BSF    03.5
081F:  MOVWF  54
0820:  BCF    0A.3
0821:  BCF    03.5
0822:  CALL   425
0823:  BSF    0A.3
0824:  MOVF   7A,W
0825:  BSF    03.5
0826:  MOVWF  23
0827:  MOVF   79,W
0828:  MOVWF  22
0829:  MOVF   78,W
082A:  MOVWF  21
082B:  MOVF   77,W
082C:  MOVWF  20
082D:  BCF    03.5
....................   
.................... //output_toggle(PIN_A0); 
.................... } 
.................... if(contRTCC==20){ 
082E:  MOVF   2B,W
082F:  SUBLW  14
0830:  BTFSS  03.2
0831:  GOTO   061
.................... valor=read_adc(); 
0832:  BSF    1F.2
0833:  BTFSC  1F.2
0834:  GOTO   033
0835:  BSF    03.5
0836:  MOVF   1E,W
0837:  BCF    03.5
0838:  MOVWF  69
0839:  MOVF   1E,W
083A:  MOVWF  6A
.................... Ptemp[1]=calculos_rtd(valor);; 
083B:  MOVF   6A,W
083C:  BSF    03.5
083D:  MOVWF  55
083E:  BCF    03.5
083F:  MOVF   69,W
0840:  BSF    03.5
0841:  MOVWF  54
0842:  BCF    0A.3
0843:  BCF    03.5
0844:  CALL   425
0845:  BSF    0A.3
0846:  MOVF   7A,W
0847:  BSF    03.5
0848:  MOVWF  27
0849:  MOVF   79,W
084A:  MOVWF  26
084B:  MOVF   78,W
084C:  MOVWF  25
084D:  MOVF   77,W
084E:  MOVWF  24
.................... delay_ms(1); 
084F:  MOVLW  01
0850:  MOVWF  63
0851:  BCF    0A.3
0852:  BCF    03.5
0853:  CALL   084
0854:  BSF    0A.3
.................... output_toggle(PIN_A0); 
0855:  BSF    03.5
0856:  BCF    05.0
0857:  MOVLW  01
0858:  BCF    03.5
0859:  XORWF  05,F
.................... delay_ms(10); 
085A:  MOVLW  0A
085B:  BSF    03.5
085C:  MOVWF  63
085D:  BCF    0A.3
085E:  BCF    03.5
085F:  CALL   084
0860:  BSF    0A.3
.................... } 
.................... if(contRTCC==30){ 
0861:  MOVF   2B,W
0862:  SUBLW  1E
0863:  BTFSS  03.2
0864:  GOTO   094
.................... valor=read_adc(); 
0865:  BSF    1F.2
0866:  BTFSC  1F.2
0867:  GOTO   066
0868:  BSF    03.5
0869:  MOVF   1E,W
086A:  BCF    03.5
086B:  MOVWF  69
086C:  MOVF   1E,W
086D:  MOVWF  6A
.................... Ptemp[2]=calculos_rtd(valor);; 
086E:  MOVF   6A,W
086F:  BSF    03.5
0870:  MOVWF  55
0871:  BCF    03.5
0872:  MOVF   69,W
0873:  BSF    03.5
0874:  MOVWF  54
0875:  BCF    0A.3
0876:  BCF    03.5
0877:  CALL   425
0878:  BSF    0A.3
0879:  MOVF   7A,W
087A:  BSF    03.5
087B:  MOVWF  2B
087C:  MOVF   79,W
087D:  MOVWF  2A
087E:  MOVF   78,W
087F:  MOVWF  29
0880:  MOVF   77,W
0881:  MOVWF  28
.................... delay_ms(1); 
0882:  MOVLW  01
0883:  MOVWF  63
0884:  BCF    0A.3
0885:  BCF    03.5
0886:  CALL   084
0887:  BSF    0A.3
.................... output_toggle(PIN_A0); 
0888:  BSF    03.5
0889:  BCF    05.0
088A:  MOVLW  01
088B:  BCF    03.5
088C:  XORWF  05,F
.................... delay_ms(10); 
088D:  MOVLW  0A
088E:  BSF    03.5
088F:  MOVWF  63
0890:  BCF    0A.3
0891:  BCF    03.5
0892:  CALL   084
0893:  BSF    0A.3
.................... } 
.................... if(contRTCC==40){ 
0894:  MOVF   2B,W
0895:  SUBLW  28
0896:  BTFSS  03.2
0897:  GOTO   1CA
.................... valor=read_adc(); 
0898:  BSF    1F.2
0899:  BTFSC  1F.2
089A:  GOTO   099
089B:  BSF    03.5
089C:  MOVF   1E,W
089D:  BCF    03.5
089E:  MOVWF  69
089F:  MOVF   1E,W
08A0:  MOVWF  6A
.................... Ptemp[3]=calculos_rtd(valor);; 
08A1:  MOVF   6A,W
08A2:  BSF    03.5
08A3:  MOVWF  55
08A4:  BCF    03.5
08A5:  MOVF   69,W
08A6:  BSF    03.5
08A7:  MOVWF  54
08A8:  BCF    0A.3
08A9:  BCF    03.5
08AA:  CALL   425
08AB:  BSF    0A.3
08AC:  MOVF   7A,W
08AD:  BSF    03.5
08AE:  MOVWF  2F
08AF:  MOVF   79,W
08B0:  MOVWF  2E
08B1:  MOVF   78,W
08B2:  MOVWF  2D
08B3:  MOVF   77,W
08B4:  MOVWF  2C
.................... delay_ms(1); 
08B5:  MOVLW  01
08B6:  MOVWF  63
08B7:  BCF    0A.3
08B8:  BCF    03.5
08B9:  CALL   084
08BA:  BSF    0A.3
.................... output_toggle(PIN_A0); 
08BB:  BSF    03.5
08BC:  BCF    05.0
08BD:  MOVLW  01
08BE:  BCF    03.5
08BF:  XORWF  05,F
.................... delay_ms(10); 
08C0:  MOVLW  0A
08C1:  BSF    03.5
08C2:  MOVWF  63
08C3:  BCF    0A.3
08C4:  BCF    03.5
08C5:  CALL   084
08C6:  BSF    0A.3
.................... temp1=(Ptemp[0]+Ptemp[1]+Ptemp[2]+Ptemp[3])/4; 
08C7:  BCF    03.1
08C8:  BSF    03.5
08C9:  MOVF   23,W
08CA:  BCF    03.5
08CB:  BSF    03.6
08CC:  MOVWF  13
08CD:  BSF    03.5
08CE:  BCF    03.6
08CF:  MOVF   22,W
08D0:  BCF    03.5
08D1:  BSF    03.6
08D2:  MOVWF  12
08D3:  BSF    03.5
08D4:  BCF    03.6
08D5:  MOVF   21,W
08D6:  BCF    03.5
08D7:  BSF    03.6
08D8:  MOVWF  11
08D9:  BSF    03.5
08DA:  BCF    03.6
08DB:  MOVF   20,W
08DC:  BCF    03.5
08DD:  BSF    03.6
08DE:  MOVWF  10
08DF:  BSF    03.5
08E0:  BCF    03.6
08E1:  MOVF   27,W
08E2:  BCF    03.5
08E3:  BSF    03.6
08E4:  MOVWF  17
08E5:  BSF    03.5
08E6:  BCF    03.6
08E7:  MOVF   26,W
08E8:  BCF    03.5
08E9:  BSF    03.6
08EA:  MOVWF  16
08EB:  BSF    03.5
08EC:  BCF    03.6
08ED:  MOVF   25,W
08EE:  BCF    03.5
08EF:  BSF    03.6
08F0:  MOVWF  15
08F1:  BSF    03.5
08F2:  BCF    03.6
08F3:  MOVF   24,W
08F4:  BCF    03.5
08F5:  BSF    03.6
08F6:  MOVWF  14
08F7:  BCF    0A.3
08F8:  BCF    03.6
08F9:  CALL   252
08FA:  BSF    0A.3
08FB:  MOVF   77,W
08FC:  BSF    03.5
08FD:  MOVWF  54
08FE:  MOVF   78,W
08FF:  MOVWF  55
0900:  MOVF   79,W
0901:  MOVWF  56
0902:  MOVF   7A,W
0903:  MOVWF  57
0904:  BCF    03.1
0905:  MOVF   57,W
0906:  BCF    03.5
0907:  BSF    03.6
0908:  MOVWF  13
0909:  BSF    03.5
090A:  BCF    03.6
090B:  MOVF   56,W
090C:  BCF    03.5
090D:  BSF    03.6
090E:  MOVWF  12
090F:  BSF    03.5
0910:  BCF    03.6
0911:  MOVF   55,W
0912:  BCF    03.5
0913:  BSF    03.6
0914:  MOVWF  11
0915:  BSF    03.5
0916:  BCF    03.6
0917:  MOVF   54,W
0918:  BCF    03.5
0919:  BSF    03.6
091A:  MOVWF  10
091B:  BSF    03.5
091C:  BCF    03.6
091D:  MOVF   2B,W
091E:  BCF    03.5
091F:  BSF    03.6
0920:  MOVWF  17
0921:  BSF    03.5
0922:  BCF    03.6
0923:  MOVF   2A,W
0924:  BCF    03.5
0925:  BSF    03.6
0926:  MOVWF  16
0927:  BSF    03.5
0928:  BCF    03.6
0929:  MOVF   29,W
092A:  BCF    03.5
092B:  BSF    03.6
092C:  MOVWF  15
092D:  BSF    03.5
092E:  BCF    03.6
092F:  MOVF   28,W
0930:  BCF    03.5
0931:  BSF    03.6
0932:  MOVWF  14
0933:  BCF    0A.3
0934:  BCF    03.6
0935:  CALL   252
0936:  BSF    0A.3
0937:  MOVF   77,W
0938:  BSF    03.5
0939:  MOVWF  58
093A:  MOVF   78,W
093B:  MOVWF  59
093C:  MOVF   79,W
093D:  MOVWF  5A
093E:  MOVF   7A,W
093F:  MOVWF  5B
0940:  BCF    03.1
0941:  MOVF   5B,W
0942:  BCF    03.5
0943:  BSF    03.6
0944:  MOVWF  13
0945:  BSF    03.5
0946:  BCF    03.6
0947:  MOVF   5A,W
0948:  BCF    03.5
0949:  BSF    03.6
094A:  MOVWF  12
094B:  BSF    03.5
094C:  BCF    03.6
094D:  MOVF   59,W
094E:  BCF    03.5
094F:  BSF    03.6
0950:  MOVWF  11
0951:  BSF    03.5
0952:  BCF    03.6
0953:  MOVF   58,W
0954:  BCF    03.5
0955:  BSF    03.6
0956:  MOVWF  10
0957:  BSF    03.5
0958:  BCF    03.6
0959:  MOVF   2F,W
095A:  BCF    03.5
095B:  BSF    03.6
095C:  MOVWF  17
095D:  BSF    03.5
095E:  BCF    03.6
095F:  MOVF   2E,W
0960:  BCF    03.5
0961:  BSF    03.6
0962:  MOVWF  16
0963:  BSF    03.5
0964:  BCF    03.6
0965:  MOVF   2D,W
0966:  BCF    03.5
0967:  BSF    03.6
0968:  MOVWF  15
0969:  BSF    03.5
096A:  BCF    03.6
096B:  MOVF   2C,W
096C:  BCF    03.5
096D:  BSF    03.6
096E:  MOVWF  14
096F:  BCF    0A.3
0970:  BCF    03.6
0971:  CALL   252
0972:  BSF    0A.3
0973:  MOVF   77,W
0974:  BSF    03.5
0975:  MOVWF  5C
0976:  MOVF   78,W
0977:  MOVWF  5D
0978:  MOVF   79,W
0979:  MOVWF  5E
097A:  MOVF   7A,W
097B:  MOVWF  5F
097C:  MOVWF  6B
097D:  MOVF   5E,W
097E:  MOVWF  6A
097F:  MOVF   5D,W
0980:  MOVWF  69
0981:  MOVF   5C,W
0982:  MOVWF  68
0983:  CLRF   6F
0984:  CLRF   6E
0985:  CLRF   6D
0986:  MOVLW  81
0987:  MOVWF  6C
0988:  BCF    0A.3
0989:  BCF    03.5
098A:  CALL   12E
098B:  BSF    0A.3
098C:  MOVF   7A,W
098D:  MOVWF  72
098E:  MOVF   79,W
098F:  MOVWF  71
0990:  MOVF   78,W
0991:  MOVWF  70
0992:  MOVF   77,W
0993:  MOVWF  6F
.................... lcd_gotoxy(2,2); 
0994:  MOVLW  02
0995:  BSF    03.5
0996:  MOVWF  63
0997:  MOVWF  64
0998:  BCF    0A.3
0999:  BCF    03.5
099A:  CALL   673
099B:  BSF    0A.3
.................... printf(lcd_putc,"TEMP %4.2f",temp1); 
099C:  BSF    03.5
099D:  CLRF   54
099E:  MOVF   54,W
099F:  BCF    0A.3
09A0:  BCF    03.5
09A1:  CALL   045
09A2:  BSF    0A.3
09A3:  BSF    03.5
09A4:  INCF   54,F
09A5:  MOVWF  77
09A6:  MOVWF  62
09A7:  BCF    0A.3
09A8:  BCF    03.5
09A9:  CALL   687
09AA:  BSF    0A.3
09AB:  MOVLW  05
09AC:  BSF    03.5
09AD:  SUBWF  54,W
09AE:  BTFSS  03.2
09AF:  GOTO   19E
09B0:  MOVLW  03
09B1:  MOVWF  04
09B2:  MOVF   72,W
09B3:  MOVWF  58
09B4:  MOVF   71,W
09B5:  MOVWF  57
09B6:  MOVF   70,W
09B7:  MOVWF  56
09B8:  BCF    03.5
09B9:  MOVF   6F,W
09BA:  BSF    03.5
09BB:  MOVWF  55
09BC:  MOVLW  02
09BD:  MOVWF  59
09BE:  BCF    0A.3
09BF:  BCF    03.5
09C0:  GOTO   6FC
09C1:  BSF    0A.3
.................... delay_ms(200); 
09C2:  MOVLW  C8
09C3:  BSF    03.5
09C4:  MOVWF  63
09C5:  BCF    0A.3
09C6:  BCF    03.5
09C7:  CALL   084
09C8:  BSF    0A.3
....................    contRTCC=0; 
09C9:  CLRF   2B
.................... } 
....................  
....................  
....................  // output_low(pin_a0); 
....................  
.................... } 
....................  
09CA:  BCF    0B.2
09CB:  BCF    0A.3
09CC:  GOTO   026
.................... void main(void){ 
*
0C99:  CLRF   04
0C9A:  BCF    03.7
0C9B:  MOVLW  1F
0C9C:  ANDWF  03,F
0C9D:  MOVLW  72
0C9E:  BSF    03.5
0C9F:  MOVWF  0F
0CA0:  MOVF   0F,W
0CA1:  MOVLW  0C
0CA2:  MOVWF  19
0CA3:  MOVLW  A2
0CA4:  MOVWF  18
0CA5:  MOVLW  90
0CA6:  BCF    03.5
0CA7:  MOVWF  18
0CA8:  BSF    03.5
0CA9:  BCF    1F.4
0CAA:  BCF    1F.5
0CAB:  MOVF   1B,W
0CAC:  ANDLW  80
0CAD:  MOVWF  1B
0CAE:  MOVLW  07
0CAF:  MOVWF  1C
.................... char a; 
.................... //float y,rtdv,rtdr,LSB; 
.................... setup_oscillator(OSC_8MHZ | OSC_INTRC); 
*
0CE0:  MOVLW  72
0CE1:  BSF    03.5
0CE2:  MOVWF  0F
0CE3:  MOVF   0F,W
.................... setup_comparator(NC_NC_NC_NC); 
0CE4:  MOVLW  07
0CE5:  MOVWF  1C
0CE6:  MOVF   05,W
0CE7:  MOVWF  05
0CE8:  MOVLW  06
0CE9:  MOVWF  77
0CEA:  DECFSZ 77,F
0CEB:  GOTO   4EA
0CEC:  NOP
0CED:  MOVF   1C,W
0CEE:  BCF    03.5
0CEF:  BCF    0D.6
.................... setup_vref(FALSE); 
0CF0:  BSF    03.5
0CF1:  CLRF   1D
....................    setup_wdt(WDT_OFF); 
0CF2:  BCF    03.5
0CF3:  BSF    03.6
0CF4:  BCF    05.0
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_128); 
0CF5:  BSF    03.5
0CF6:  BCF    03.6
0CF7:  MOVF   01,W
0CF8:  ANDLW  C0
0CF9:  IORLW  06
0CFA:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0CFB:  BCF    03.5
0CFC:  CLRF   10
....................    setup_timer_2(T2_DIV_BY_4, 250, 1);  
0CFD:  MOVLW  00
0CFE:  MOVWF  78
0CFF:  IORLW  05
0D00:  MOVWF  12
0D01:  MOVLW  FA
0D02:  BSF    03.5
0D03:  MOVWF  12
....................    setup_ccp1(CCP_PWM);  
0D04:  BCF    06.0
0D05:  BCF    03.5
0D06:  BCF    06.0
0D07:  MOVLW  0C
0D08:  MOVWF  17
....................    enable_interrupts(INT_TIMER0); 
0D09:  BSF    0B.5
....................    enable_interrupts(global); 
0D0A:  MOVLW  C0
0D0B:  IORWF  0B,F
.................... set_tris_A(0x10); 
0D0C:  MOVLW  10
0D0D:  BSF    03.5
0D0E:  MOVWF  05
.................... set_tris_b(0x08); 
0D0F:  MOVLW  08
0D10:  MOVWF  06
.................... setup_adc_ports(sAN4|VSS_VDD); 
0D11:  BCF    1F.4
0D12:  BCF    1F.5
0D13:  MOVF   1B,W
0D14:  ANDLW  80
0D15:  IORLW  10
0D16:  MOVWF  1B
.................... setup_adc(ADC_CLOCK_INTERNAL); 
0D17:  BCF    1F.6
0D18:  BCF    03.5
0D19:  BSF    1F.6
0D1A:  BSF    1F.7
0D1B:  BSF    03.5
0D1C:  BSF    1F.7
0D1D:  BCF    03.5
0D1E:  BSF    1F.0
.................... set_adc_channel(4); 
0D1F:  MOVLW  20
0D20:  MOVWF  78
0D21:  MOVF   1F,W
0D22:  ANDLW  C7
0D23:  IORWF  78,W
0D24:  MOVWF  1F
.................... lcd_init();                      //Inicializamos el LCD. 
0D25:  GOTO   1CD
.................... lcd_putc("\fControl =");      // 
0D26:  BSF    03.5
0D27:  CLRF   32
0D28:  MOVF   32,W
0D29:  BCF    0A.3
0D2A:  BCF    03.5
0D2B:  CALL   054
0D2C:  BSF    0A.3
0D2D:  IORLW  00
0D2E:  BTFSC  03.2
0D2F:  GOTO   542
0D30:  BSF    03.5
0D31:  INCF   32,F
0D32:  BCF    03.5
0D33:  CLRF   29
0D34:  BTFSC  0B.7
0D35:  BSF    29.7
0D36:  BCF    0B.7
0D37:  BSF    03.5
0D38:  MOVWF  62
0D39:  BCF    0A.3
0D3A:  BCF    03.5
0D3B:  CALL   687
0D3C:  BSF    0A.3
0D3D:  BTFSC  29.7
0D3E:  BSF    0B.7
0D3F:  BSF    03.5
0D40:  GOTO   528
0D41:  BCF    03.5
....................  
....................     //  do { 
....................     while(1) 
....................     { 
....................             D=calculos_pid(temp1); 
0D42:  MOVF   72,W
0D43:  BSF    03.5
0D44:  MOVWF  35
0D45:  MOVF   71,W
0D46:  MOVWF  34
0D47:  MOVF   70,W
0D48:  MOVWF  33
0D49:  BCF    03.5
0D4A:  MOVF   6F,W
0D4B:  BSF    03.5
0D4C:  MOVWF  32
0D4D:  BCF    03.5
0D4E:  CALL   243
0D4F:  MOVF   7A,W
0D50:  MOVWF  76
0D51:  MOVF   79,W
0D52:  MOVWF  75
0D53:  MOVF   78,W
0D54:  MOVWF  74
0D55:  MOVF   77,W
0D56:  MOVWF  73
....................             Duty=(int16)D; 
0D57:  MOVF   76,W
0D58:  BSF    03.5
0D59:  MOVWF  35
0D5A:  MOVF   75,W
0D5B:  MOVWF  34
0D5C:  MOVF   74,W
0D5D:  MOVWF  33
0D5E:  MOVF   73,W
0D5F:  MOVWF  32
0D60:  BCF    03.5
0D61:  CALL   3F7
0D62:  MOVF   79,W
0D63:  MOVWF  6E
0D64:  MOVF   78,W
0D65:  MOVWF  6D
....................             Control=((1000-Duty)); 
0D66:  MOVF   6D,W
0D67:  SUBLW  E8
0D68:  MOVWF  6B
0D69:  MOVLW  03
0D6A:  MOVWF  6C
0D6B:  MOVF   6E,W
0D6C:  BTFSS  03.0
0D6D:  INCFSZ 6E,W
0D6E:  SUBWF  6C,F
....................             set_pwm1_duty(Control); 
0D6F:  MOVF   6C,W
0D70:  MOVWF  79
0D71:  MOVF   6B,W
0D72:  MOVWF  78
0D73:  RRF    79,F
0D74:  RRF    78,F
0D75:  RRF    79,F
0D76:  RRF    78,F
0D77:  RRF    79,F
0D78:  MOVF   78,W
0D79:  MOVWF  15
0D7A:  RRF    79,F
0D7B:  RRF    79,W
0D7C:  ANDLW  30
0D7D:  MOVWF  77
0D7E:  MOVF   17,W
0D7F:  ANDLW  CF
0D80:  IORWF  77,W
0D81:  MOVWF  17
0D82:  CLRF   29
0D83:  BTFSC  0B.7
0D84:  BSF    29.7
0D85:  BCF    0B.7
....................             lcd_gotoxy(9,1);  
0D86:  MOVLW  09
0D87:  BSF    03.5
0D88:  MOVWF  63
0D89:  MOVLW  01
0D8A:  MOVWF  64
0D8B:  BCF    0A.3
0D8C:  BCF    03.5
0D8D:  CALL   673
0D8E:  BSF    0A.3
0D8F:  BTFSC  29.7
0D90:  BSF    0B.7
0D91:  CLRF   29
0D92:  BTFSC  0B.7
0D93:  BSF    29.7
0D94:  BCF    0B.7
....................             printf(lcd_putc,"PI %lu",Control); 
0D95:  MOVLW  50
0D96:  BSF    03.5
0D97:  MOVWF  62
0D98:  BCF    0A.3
0D99:  BCF    03.5
0D9A:  CALL   687
0D9B:  BSF    0A.3
0D9C:  BTFSC  29.7
0D9D:  BSF    0B.7
0D9E:  CLRF   29
0D9F:  BTFSC  0B.7
0DA0:  BSF    29.7
0DA1:  BCF    0B.7
0DA2:  MOVLW  49
0DA3:  BSF    03.5
0DA4:  MOVWF  62
0DA5:  BCF    0A.3
0DA6:  BCF    03.5
0DA7:  CALL   687
0DA8:  BSF    0A.3
0DA9:  BTFSC  29.7
0DAA:  BSF    0B.7
0DAB:  CLRF   29
0DAC:  BTFSC  0B.7
0DAD:  BSF    29.7
0DAE:  BCF    0B.7
0DAF:  MOVLW  20
0DB0:  BSF    03.5
0DB1:  MOVWF  62
0DB2:  BCF    0A.3
0DB3:  BCF    03.5
0DB4:  CALL   687
0DB5:  BSF    0A.3
0DB6:  BTFSC  29.7
0DB7:  BSF    0B.7
0DB8:  MOVLW  10
0DB9:  MOVWF  04
0DBA:  MOVF   6C,W
0DBB:  BSF    03.5
0DBC:  MOVWF  34
0DBD:  BCF    03.5
0DBE:  MOVF   6B,W
0DBF:  BSF    03.5
0DC0:  MOVWF  33
0DC1:  BCF    03.5
0DC2:  CALL   418
....................             delay_ms(300); 
0DC3:  MOVLW  02
0DC4:  BSF    03.5
0DC5:  MOVWF  32
0DC6:  BCF    03.5
0DC7:  CLRF   29
0DC8:  BTFSC  0B.7
0DC9:  BSF    29.7
0DCA:  BCF    0B.7
0DCB:  MOVLW  96
0DCC:  BSF    03.5
0DCD:  MOVWF  63
0DCE:  BCF    0A.3
0DCF:  BCF    03.5
0DD0:  CALL   084
0DD1:  BSF    0A.3
0DD2:  BTFSC  29.7
0DD3:  BSF    0B.7
0DD4:  BSF    03.5
0DD5:  DECFSZ 32,F
0DD6:  GOTO   5C6
....................      //c=fgetc(HOSTPC); 
....................      a=c; 
0DD7:  MOVF   30,W
0DD8:  MOVWF  31
....................      delay_us(100); 
0DD9:  MOVLW  42
0DDA:  MOVWF  77
0DDB:  DECFSZ 77,F
0DDC:  GOTO   5DB
0DDD:  NOP
....................           //} while(a!='1' && a!='2' && a!='3'); 
....................  switch (a) 
....................            { 
0DDE:  MOVF   31,W
0DDF:  XORLW  31
0DE0:  BCF    03.5
0DE1:  BTFSS  03.2
0DE2:  GOTO   664
....................             case '1':  
....................             { 
....................             D=calculos_pid(temp1); 
0DE3:  MOVF   72,W
0DE4:  BSF    03.5
0DE5:  MOVWF  35
0DE6:  MOVF   71,W
0DE7:  MOVWF  34
0DE8:  MOVF   70,W
0DE9:  MOVWF  33
0DEA:  BCF    03.5
0DEB:  MOVF   6F,W
0DEC:  BSF    03.5
0DED:  MOVWF  32
0DEE:  BCF    03.5
0DEF:  CALL   243
0DF0:  MOVF   7A,W
0DF1:  MOVWF  76
0DF2:  MOVF   79,W
0DF3:  MOVWF  75
0DF4:  MOVF   78,W
0DF5:  MOVWF  74
0DF6:  MOVF   77,W
0DF7:  MOVWF  73
....................             Duty=(int16)D; 
0DF8:  MOVF   76,W
0DF9:  BSF    03.5
0DFA:  MOVWF  35
0DFB:  MOVF   75,W
0DFC:  MOVWF  34
0DFD:  MOVF   74,W
0DFE:  MOVWF  33
0DFF:  MOVF   73,W
0E00:  MOVWF  32
0E01:  BCF    03.5
0E02:  CALL   3F7
0E03:  MOVF   79,W
0E04:  MOVWF  6E
0E05:  MOVF   78,W
0E06:  MOVWF  6D
....................             Control=((1000-Duty)); 
0E07:  MOVF   6D,W
0E08:  SUBLW  E8
0E09:  MOVWF  6B
0E0A:  MOVLW  03
0E0B:  MOVWF  6C
0E0C:  MOVF   6E,W
0E0D:  BTFSS  03.0
0E0E:  INCFSZ 6E,W
0E0F:  SUBWF  6C,F
....................             set_pwm1_duty(Control); 
0E10:  MOVF   6C,W
0E11:  MOVWF  79
0E12:  MOVF   6B,W
0E13:  MOVWF  78
0E14:  RRF    79,F
0E15:  RRF    78,F
0E16:  RRF    79,F
0E17:  RRF    78,F
0E18:  RRF    79,F
0E19:  MOVF   78,W
0E1A:  MOVWF  15
0E1B:  RRF    79,F
0E1C:  RRF    79,W
0E1D:  ANDLW  30
0E1E:  MOVWF  77
0E1F:  MOVF   17,W
0E20:  ANDLW  CF
0E21:  IORWF  77,W
0E22:  MOVWF  17
0E23:  CLRF   29
0E24:  BTFSC  0B.7
0E25:  BSF    29.7
0E26:  BCF    0B.7
....................             lcd_gotoxy(9,1);  
0E27:  MOVLW  09
0E28:  BSF    03.5
0E29:  MOVWF  63
0E2A:  MOVLW  01
0E2B:  MOVWF  64
0E2C:  BCF    0A.3
0E2D:  BCF    03.5
0E2E:  CALL   673
0E2F:  BSF    0A.3
0E30:  BTFSC  29.7
0E31:  BSF    0B.7
....................             printf(lcd_putc,"PI1 %lu",Control); 
0E32:  BSF    03.5
0E33:  CLRF   32
0E34:  MOVF   32,W
0E35:  BCF    0A.3
0E36:  BCF    03.5
0E37:  CALL   063
0E38:  BSF    0A.3
0E39:  BSF    03.5
0E3A:  INCF   32,F
0E3B:  MOVWF  77
0E3C:  BCF    03.5
0E3D:  CLRF   29
0E3E:  BTFSC  0B.7
0E3F:  BSF    29.7
0E40:  BCF    0B.7
0E41:  MOVF   77,W
0E42:  BSF    03.5
0E43:  MOVWF  62
0E44:  BCF    0A.3
0E45:  BCF    03.5
0E46:  CALL   687
0E47:  BSF    0A.3
0E48:  BTFSC  29.7
0E49:  BSF    0B.7
0E4A:  MOVLW  04
0E4B:  BSF    03.5
0E4C:  SUBWF  32,W
0E4D:  BTFSS  03.2
0E4E:  GOTO   634
0E4F:  MOVLW  10
0E50:  MOVWF  04
0E51:  BCF    03.5
0E52:  MOVF   6C,W
0E53:  BSF    03.5
0E54:  MOVWF  34
0E55:  BCF    03.5
0E56:  MOVF   6B,W
0E57:  BSF    03.5
0E58:  MOVWF  33
0E59:  BCF    03.5
0E5A:  CALL   418
....................             envioUART(valor); 
0E5B:  MOVF   6A,W
0E5C:  BSF    03.5
0E5D:  MOVWF  33
0E5E:  BCF    03.5
0E5F:  MOVF   69,W
0E60:  BSF    03.5
0E61:  MOVWF  32
0E62:  BCF    03.5
0E63:  GOTO   489
....................             } 
....................     
....................           }  //end Switch 
.................... } 
0E64:  GOTO   542
.................... } 
0E65:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT MCLR NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT INTRC_IO
   Word  2: 3FFF   FCMEN IESO
