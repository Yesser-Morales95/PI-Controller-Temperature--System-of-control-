CCS PCM C Compiler, Version 4.084, 27019               17-Nov-16 04:06

               Filename: C:\Users\YESSER-M\Documents\GitHub\PI-Controller-Temperature--System-of-control-\Project Temperatura PI\Project Control PI.lst

               ROM used: 2371 words (58%)
                         Largest free fragment is 1463
               RAM used: 64 (17%) at main() level
                         122 (33%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  BTFSS  0B.5
001D:  GOTO   020
001E:  BTFSC  0B.2
001F:  GOTO   033
0020:  MOVF   22,W
0021:  MOVWF  04
0022:  MOVF   23,W
0023:  MOVWF  77
0024:  MOVF   24,W
0025:  MOVWF  78
0026:  MOVF   25,W
0027:  MOVWF  79
0028:  MOVF   26,W
0029:  MOVWF  7A
002A:  MOVF   27,W
002B:  MOVWF  7B
002C:  MOVF   28,W
002D:  MOVWF  0A
002E:  SWAPF  21,W
002F:  MOVWF  03
0030:  SWAPF  7F,F
0031:  SWAPF  7F,W
0032:  RETFIE
0033:  BCF    0A.3
0034:  GOTO   280
.................... #include <16f88.h>//pic a utilizar 
.................... //////// Standard Header file for the PIC16F88 device //////////////// 
.................... #device PIC16F88 
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES NOWDT, HS, NOPUT,NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG, NOPROTECT, FCMEN, IESO 
.................... #use delay (internal=4MHZ) 
*
0059:  MOVLW  74
005A:  MOVWF  04
005B:  BCF    03.7
005C:  MOVF   00,W
005D:  BTFSC  03.2
005E:  GOTO   06D
005F:  MOVLW  01
0060:  MOVWF  78
0061:  CLRF   77
0062:  DECFSZ 77,F
0063:  GOTO   062
0064:  DECFSZ 78,F
0065:  GOTO   061
0066:  MOVLW  4A
0067:  MOVWF  77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  GOTO   06B
006B:  DECFSZ 00,F
006C:  GOTO   05F
006D:  RETLW  00
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
*
051A:  MOVF   59,W
051B:  MOVWF  67
051C:  MOVF   58,W
051D:  MOVWF  66
051E:  MOVF   57,W
051F:  MOVWF  65
0520:  MOVF   56,W
0521:  MOVWF  64
0522:  CLRF   6B
0523:  CLRF   6A
0524:  CLRF   69
0525:  CLRF   68
0526:  CALL   4DB
0527:  BTFSC  03.0
0528:  GOTO   52B
0529:  BTFSS  03.2
052A:  GOTO   530
....................       return(0.0); 
052B:  CLRF   77
052C:  CLRF   78
052D:  CLRF   79
052E:  CLRF   7A
052F:  GOTO   5CF
....................  
....................    y=x; 
0530:  MOVF   59,W
0531:  MOVWF  5D
0532:  MOVF   58,W
0533:  MOVWF  5C
0534:  MOVF   57,W
0535:  MOVWF  5B
0536:  MOVF   56,W
0537:  MOVWF  5A
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
0538:  CLRF   63
0539:  MOVLW  5A
053A:  MOVWF  62
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
053B:  MOVF   62,W
053C:  MOVWF  04
053D:  BCF    03.7
053E:  BTFSC  63.0
053F:  BSF    03.7
0540:  MOVF   00,W
0541:  CLRF   67
0542:  MOVWF  66
0543:  MOVLW  7F
0544:  ADDWF  66,W
0545:  MOVWF  68
0546:  MOVF   67,W
0547:  MOVWF  69
0548:  BTFSC  03.0
0549:  INCF   69,F
054A:  BCF    03.0
054B:  RRF    69,W
054C:  MOVWF  7A
054D:  RRF    68,W
054E:  MOVWF  79
054F:  MOVWF  6A
0550:  MOVF   62,W
0551:  MOVWF  04
0552:  BCF    03.7
0553:  BTFSC  63.0
0554:  BSF    03.7
0555:  MOVF   6A,W
0556:  MOVWF  00
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
0557:  MOVF   5D,W
0558:  MOVWF  61
0559:  MOVF   5C,W
055A:  MOVWF  60
055B:  MOVF   5B,W
055C:  MOVWF  5F
055D:  MOVF   5A,W
055E:  MOVWF  5E
055F:  CLRF   29
0560:  BTFSC  0B.7
0561:  BSF    29.7
0562:  BCF    0B.7
....................       y+=(x/y); 
0563:  MOVF   59,W
0564:  BSF    03.5
0565:  MOVWF  2F
0566:  BCF    03.5
0567:  MOVF   58,W
0568:  BSF    03.5
0569:  MOVWF  2E
056A:  BCF    03.5
056B:  MOVF   57,W
056C:  BSF    03.5
056D:  MOVWF  2D
056E:  BCF    03.5
056F:  MOVF   56,W
0570:  BSF    03.5
0571:  MOVWF  2C
0572:  BCF    03.5
0573:  MOVF   5D,W
0574:  BSF    03.5
0575:  MOVWF  33
0576:  BCF    03.5
0577:  MOVF   5C,W
0578:  BSF    03.5
0579:  MOVWF  32
057A:  BCF    03.5
057B:  MOVF   5B,W
057C:  BSF    03.5
057D:  MOVWF  31
057E:  BCF    03.5
057F:  MOVF   5A,W
0580:  BSF    03.5
0581:  MOVWF  30
0582:  BCF    03.5
0583:  CALL   1B4
0584:  BTFSC  29.7
0585:  BSF    0B.7
0586:  BCF    03.1
0587:  CLRF   29
0588:  BTFSC  0B.7
0589:  BSF    29.7
058A:  BCF    0B.7
058B:  MOVF   5D,W
058C:  BSF    03.5
058D:  MOVWF  2B
058E:  BCF    03.5
058F:  MOVF   5C,W
0590:  BSF    03.5
0591:  MOVWF  2A
0592:  BCF    03.5
0593:  MOVF   5B,W
0594:  BSF    03.5
0595:  MOVWF  29
0596:  BCF    03.5
0597:  MOVF   5A,W
0598:  BSF    03.5
0599:  MOVWF  28
059A:  MOVF   7A,W
059B:  MOVWF  2F
059C:  MOVF   79,W
059D:  MOVWF  2E
059E:  MOVF   78,W
059F:  MOVWF  2D
05A0:  MOVF   77,W
05A1:  MOVWF  2C
05A2:  BCF    03.5
05A3:  CALL   06E
05A4:  BTFSC  29.7
05A5:  BSF    0B.7
05A6:  MOVF   7A,W
05A7:  MOVWF  5D
05A8:  MOVF   79,W
05A9:  MOVWF  5C
05AA:  MOVF   78,W
05AB:  MOVWF  5B
05AC:  MOVF   77,W
05AD:  MOVWF  5A
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
05AE:  MOVF   62,W
05AF:  MOVWF  04
05B0:  BCF    03.7
05B1:  BTFSC  63.0
05B2:  BSF    03.7
05B3:  DECF   00,F
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
05B4:  MOVF   61,W
05B5:  MOVWF  67
05B6:  MOVF   60,W
05B7:  MOVWF  66
05B8:  MOVF   5F,W
05B9:  MOVWF  65
05BA:  MOVF   5E,W
05BB:  MOVWF  64
05BC:  MOVF   5D,W
05BD:  MOVWF  6B
05BE:  MOVF   5C,W
05BF:  MOVWF  6A
05C0:  MOVF   5B,W
05C1:  MOVWF  69
05C2:  MOVF   5A,W
05C3:  MOVWF  68
05C4:  CALL   4DB
05C5:  BTFSS  03.2
05C6:  GOTO   557
....................  
....................    return(res); 
05C7:  MOVF   5E,W
05C8:  MOVWF  77
05C9:  MOVF   5F,W
05CA:  MOVWF  78
05CB:  MOVF   60,W
05CC:  MOVWF  79
05CD:  MOVF   61,W
05CE:  MOVWF  7A
.................... } 
05CF:  BSF    0A.3
05D0:  GOTO   197 (RETURN)
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "flex_lcd.c"  //Llamada a la libreria lcd.c 
.................... // flex_lcd.c 
....................  
.................... // Change these pins to fit your own board. 
....................  
.................... #define LCD_DB4 PIN_B1 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B6 
.................... #define LCD_DB7 PIN_B7 
....................  
.................... #define LCD_RS PIN_A2 
.................... //#define LCD_RW PIN_A3 
.................... #define LCD_E  PIN_A1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW 1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................   0xc, // Display on 
....................   1, // Clear display 
....................   6 // Increment cursor 
.................... }; 
....................  
....................  
.................... //------------------------------------- 
....................  
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................   // Note: !! converts an integer expression 
....................   // to a boolean (1 or 0). 
....................   output_bit(LCD_DB4, !!(nibble & 1)); 
*
037B:  BTFSC  6C.0
037C:  GOTO   37F
037D:  BCF    06.1
037E:  GOTO   380
037F:  BSF    06.1
0380:  BSF    03.5
0381:  BCF    06.1
....................   output_bit(LCD_DB5, !!(nibble & 2)); 
0382:  BCF    03.5
0383:  BTFSC  6C.1
0384:  GOTO   387
0385:  BCF    06.4
0386:  GOTO   388
0387:  BSF    06.4
0388:  BSF    03.5
0389:  BCF    06.4
....................   output_bit(LCD_DB6, !!(nibble & 4)); 
038A:  BCF    03.5
038B:  BTFSC  6C.2
038C:  GOTO   38F
038D:  BCF    06.6
038E:  GOTO   390
038F:  BSF    06.6
0390:  BSF    03.5
0391:  BCF    06.6
....................   output_bit(LCD_DB7, !!(nibble & 8)); 
0392:  BCF    03.5
0393:  BTFSC  6C.3
0394:  GOTO   397
0395:  BCF    06.7
0396:  GOTO   398
0397:  BSF    06.7
0398:  BSF    03.5
0399:  BCF    06.7
....................  
....................   delay_cycles(1); 
039A:  NOP
....................   output_high(LCD_E); 
039B:  BCF    05.1
039C:  BCF    03.5
039D:  BSF    05.1
....................   delay_cycles(2);// 2us 
039E:  GOTO   39F
....................   output_low(LCD_E); 
039F:  BSF    03.5
03A0:  BCF    05.1
03A1:  BCF    03.5
03A2:  BCF    05.1
.................... } 
03A3:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine. For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
....................   int8 retval; 
....................   // Create bit variables so that we can easily set 
....................   // individual bits in the retval variable. 
....................   #bit retval_0 = retval.0 
....................   #bit retval_1 = retval.1 
....................   #bit retval_2 = retval.2 
....................   #bit retval_3 = retval.3 
....................  
....................   retval = 0; 
....................  
....................   output_high(LCD_E); 
....................   delay_cycles(1); 
....................  
....................   retval_0 = input(LCD_DB4); 
....................   retval_1 = input(LCD_DB5); 
....................   retval_2 = input(LCD_DB6); 
....................   retval_3 = input(LCD_DB7); 
....................  
....................   output_low(LCD_E); 
....................  
....................   return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
....................   int8 low; 
....................   int8 high; 
....................  
....................   output_high(LCD_RW); 
....................   delay_cycles(1); 
....................  
....................   high = lcd_read_nibble(); 
....................  
....................   low = lcd_read_nibble(); 
....................  
....................   return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
....................   output_low(LCD_RS); 
03A4:  BSF    03.5
03A5:  BCF    05.2
03A6:  BCF    03.5
03A7:  BCF    05.2
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
03A8:  MOVLW  13
03A9:  MOVWF  77
03AA:  DECFSZ 77,F
03AB:  GOTO   3AA
03AC:  GOTO   3AD
.................... #endif 
....................  
....................   if(address) 
03AD:  MOVF   69,F
03AE:  BTFSC  03.2
03AF:  GOTO   3B5
....................   output_high(LCD_RS); 
03B0:  BSF    03.5
03B1:  BCF    05.2
03B2:  BCF    03.5
03B3:  BSF    05.2
....................   else 
03B4:  GOTO   3B9
....................   output_low(LCD_RS); 
03B5:  BSF    03.5
03B6:  BCF    05.2
03B7:  BCF    03.5
03B8:  BCF    05.2
....................  
....................   delay_cycles(1); 
03B9:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
03BA:  BSF    03.5
03BB:  BCF    05.1
03BC:  BCF    03.5
03BD:  BCF    05.1
....................  
....................   lcd_send_nibble(n >> 4); 
03BE:  SWAPF  6A,W
03BF:  MOVWF  6B
03C0:  MOVLW  0F
03C1:  ANDWF  6B,F
03C2:  MOVF   6B,W
03C3:  MOVWF  6C
03C4:  CALL   37B
....................   lcd_send_nibble(n & 0xf); 
03C5:  MOVF   6A,W
03C6:  ANDLW  0F
03C7:  MOVWF  6B
03C8:  MOVWF  6C
03C9:  CALL   37B
.................... } 
03CA:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_init(void) 
.................... { 
....................   int8 i; 
....................  
....................   output_low(LCD_RS); 
03CB:  BSF    03.5
03CC:  BCF    05.2
03CD:  BCF    03.5
03CE:  BCF    05.2
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
03CF:  BSF    03.5
03D0:  BCF    05.1
03D1:  BCF    03.5
03D2:  BCF    05.1
03D3:  CLRF   29
03D4:  BTFSC  0B.7
03D5:  BSF    29.7
03D6:  BCF    0B.7
....................  
....................   delay_ms(15);//15ms 
03D7:  MOVLW  0F
03D8:  MOVWF  74
03D9:  CALL   059
03DA:  BTFSC  29.7
03DB:  BSF    0B.7
....................  
....................   for(i=0 ;i < 3; i++) 
03DC:  CLRF   56
03DD:  MOVF   56,W
03DE:  SUBLW  02
03DF:  BTFSS  03.0
03E0:  GOTO   3EF
....................   { 
....................     lcd_send_nibble(0x03); 
03E1:  MOVLW  03
03E2:  MOVWF  6C
03E3:  CALL   37B
03E4:  CLRF   29
03E5:  BTFSC  0B.7
03E6:  BSF    29.7
03E7:  BCF    0B.7
....................     delay_ms(5);//5ms 
03E8:  MOVLW  05
03E9:  MOVWF  74
03EA:  CALL   059
03EB:  BTFSC  29.7
03EC:  BSF    0B.7
....................   } 
03ED:  INCF   56,F
03EE:  GOTO   3DD
....................  
....................   lcd_send_nibble(0x02); 
03EF:  MOVLW  02
03F0:  MOVWF  6C
03F1:  CALL   37B
....................  
....................   for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
03F2:  CLRF   56
03F3:  MOVF   56,W
03F4:  SUBLW  03
03F5:  BTFSS  03.0
03F6:  GOTO   409
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
03F7:  MOVF   56,W
03F8:  CALL   035
03F9:  MOVWF  57
03FA:  CLRF   69
03FB:  MOVF   57,W
03FC:  MOVWF  6A
03FD:  CALL   3A4
03FE:  CLRF   29
03FF:  BTFSC  0B.7
0400:  BSF    29.7
0401:  BCF    0B.7
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled. One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
.................... #ifndef USE_LCD_RW 
.................... delay_ms(5); 
0402:  MOVLW  05
0403:  MOVWF  74
0404:  CALL   059
0405:  BTFSC  29.7
0406:  BSF    0B.7
.................... #endif 
.................... } 
0407:  INCF   56,F
0408:  GOTO   3F3
....................  
.................... } 
0409:  BSF    0A.3
040A:  GOTO   069 (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
....................   int8 address; 
....................  
....................   if(y != 1) 
040B:  DECFSZ 66,W
040C:  GOTO   40E
040D:  GOTO   411
....................   address = lcd_line_two; 
040E:  MOVLW  40
040F:  MOVWF  67
....................   else 
0410:  GOTO   412
....................   address=0; 
0411:  CLRF   67
....................  
....................   address += x-1; 
0412:  MOVLW  01
0413:  SUBWF  65,W
0414:  ADDWF  67,F
....................   lcd_send_byte(0, 0x80 | address); 
0415:  MOVF   67,W
0416:  IORLW  80
0417:  MOVWF  68
0418:  CLRF   69
0419:  MOVF   68,W
041A:  MOVWF  6A
041B:  CALL   3A4
.................... } 
041C:  RETLW  00
....................  
.................... //----------------------------- 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................   switch(c) 
....................   { 
041D:  MOVF   64,W
041E:  XORLW  0C
041F:  BTFSC  03.2
0420:  GOTO   428
0421:  XORLW  06
0422:  BTFSC  03.2
0423:  GOTO   436
0424:  XORLW  02
0425:  BTFSC  03.2
0426:  GOTO   43C
0427:  GOTO   441
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0428:  CLRF   69
0429:  MOVLW  01
042A:  MOVWF  6A
042B:  CALL   3A4
042C:  CLRF   29
042D:  BTFSC  0B.7
042E:  BSF    29.7
042F:  BCF    0B.7
....................       delay_ms(2);//2ms 
0430:  MOVLW  02
0431:  MOVWF  74
0432:  CALL   059
0433:  BTFSC  29.7
0434:  BSF    0B.7
....................       break; 
0435:  GOTO   447
....................  
....................     case '\n': 
....................       lcd_gotoxy(1,2); 
0436:  MOVLW  01
0437:  MOVWF  65
0438:  MOVLW  02
0439:  MOVWF  66
043A:  CALL   40B
....................       break; 
043B:  GOTO   447
....................  
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
043C:  CLRF   69
043D:  MOVLW  10
043E:  MOVWF  6A
043F:  CALL   3A4
....................       break; 
0440:  GOTO   447
....................  
....................     default: 
....................       lcd_send_byte(1,c); 
0441:  MOVLW  01
0442:  MOVWF  69
0443:  MOVF   64,W
0444:  MOVWF  6A
0445:  CALL   3A4
....................       break; 
0446:  GOTO   447
....................   } 
.................... } 
0447:  RETLW  00
....................  
.................... void lcd_comand(int d) 
.................... { 
.................... lcd_send_byte(0,d); 
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
....................   char value; 
....................  
....................   lcd_gotoxy(x,y); 
....................  
....................   // Wait until busy flag is low. 
....................   while(bit_test(lcd_read_byte(),7)); 
....................  
....................   output_high(LCD_RS); 
....................   value = lcd_read_byte(); 
....................   output_low(lcd_RS); 
....................  
....................   return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
.................... int16 valor; 
.................... float temp,temp1,Ptemp[4]; 
.................... int contRTCC=0; 
*
080F:  BCF    03.5
0810:  CLRF   44
.................... int1 val=0; 
0811:  BCF    45.0
....................  
.................... //T=(4/fosc * PREESCALER )(256-Carga en el timer)   T-> tiempo de desborde del timer. 
....................  
....................  
.................... #int_timer0 
.................... void int_tiempo0(void){ 
.................... ++contRTCC; 
*
0280:  INCF   44,F
.................... if(contRTCC==20){ 
0281:  MOVF   44,W
0282:  SUBLW  14
0283:  BTFSS  03.2
0284:  GOTO   29B
.................... valor=read_adc(); 
0285:  BSF    1F.2
0286:  BTFSC  1F.2
0287:  GOTO   286
0288:  BSF    03.5
0289:  MOVF   1E,W
028A:  BCF    03.5
028B:  MOVWF  2A
028C:  MOVF   1E,W
028D:  MOVWF  2B
.................... Ptemp[0]=temp; 
028E:  MOVF   2F,W
028F:  MOVWF  37
0290:  MOVF   2E,W
0291:  MOVWF  36
0292:  MOVF   2D,W
0293:  MOVWF  35
0294:  MOVF   2C,W
0295:  MOVWF  34
.................... if (val==1){ 
0296:  BTFSS  45.0
0297:  GOTO   29A
.................... val=0; 
0298:  BCF    45.0
.................... }else{ 
0299:  GOTO   29B
.................... val=1; 
029A:  BSF    45.0
.................... } 
.................... } 
.................... if(contRTCC==40){ 
029B:  MOVF   44,W
029C:  SUBLW  28
029D:  BTFSS  03.2
029E:  GOTO   2B3
.................... valor=read_adc(); 
029F:  BSF    1F.2
02A0:  BTFSC  1F.2
02A1:  GOTO   2A0
02A2:  BSF    03.5
02A3:  MOVF   1E,W
02A4:  BCF    03.5
02A5:  MOVWF  2A
02A6:  MOVF   1E,W
02A7:  MOVWF  2B
.................... Ptemp[1]=temp; 
02A8:  MOVF   2F,W
02A9:  MOVWF  3B
02AA:  MOVF   2E,W
02AB:  MOVWF  3A
02AC:  MOVF   2D,W
02AD:  MOVWF  39
02AE:  MOVF   2C,W
02AF:  MOVWF  38
.................... delay_ms(1); 
02B0:  MOVLW  01
02B1:  MOVWF  74
02B2:  CALL   059
.................... } 
.................... if(contRTCC==60){ 
02B3:  MOVF   44,W
02B4:  SUBLW  3C
02B5:  BTFSS  03.2
02B6:  GOTO   2CB
.................... valor=read_adc(); 
02B7:  BSF    1F.2
02B8:  BTFSC  1F.2
02B9:  GOTO   2B8
02BA:  BSF    03.5
02BB:  MOVF   1E,W
02BC:  BCF    03.5
02BD:  MOVWF  2A
02BE:  MOVF   1E,W
02BF:  MOVWF  2B
.................... Ptemp[2]=temp; 
02C0:  MOVF   2F,W
02C1:  MOVWF  3F
02C2:  MOVF   2E,W
02C3:  MOVWF  3E
02C4:  MOVF   2D,W
02C5:  MOVWF  3D
02C6:  MOVF   2C,W
02C7:  MOVWF  3C
.................... delay_ms(1); 
02C8:  MOVLW  01
02C9:  MOVWF  74
02CA:  CALL   059
.................... } 
.................... if(contRTCC==80){ 
02CB:  MOVF   44,W
02CC:  SUBLW  50
02CD:  BTFSS  03.2
02CE:  GOTO   36D
.................... valor=read_adc(); 
02CF:  BSF    1F.2
02D0:  BTFSC  1F.2
02D1:  GOTO   2D0
02D2:  BSF    03.5
02D3:  MOVF   1E,W
02D4:  BCF    03.5
02D5:  MOVWF  2A
02D6:  MOVF   1E,W
02D7:  MOVWF  2B
.................... Ptemp[3]=temp; 
02D8:  MOVF   2F,W
02D9:  MOVWF  43
02DA:  MOVF   2E,W
02DB:  MOVWF  42
02DC:  MOVF   2D,W
02DD:  MOVWF  41
02DE:  MOVF   2C,W
02DF:  MOVWF  40
.................... delay_ms(1); 
02E0:  MOVLW  01
02E1:  MOVWF  74
02E2:  CALL   059
.................... contRTCC=0; 
02E3:  CLRF   44
.................... temp1=(Ptemp[0]+Ptemp[1]+Ptemp[2]+Ptemp[3])/4; 
02E4:  BCF    03.1
02E5:  MOVF   37,W
02E6:  BSF    03.5
02E7:  MOVWF  2B
02E8:  BCF    03.5
02E9:  MOVF   36,W
02EA:  BSF    03.5
02EB:  MOVWF  2A
02EC:  BCF    03.5
02ED:  MOVF   35,W
02EE:  BSF    03.5
02EF:  MOVWF  29
02F0:  BCF    03.5
02F1:  MOVF   34,W
02F2:  BSF    03.5
02F3:  MOVWF  28
02F4:  BCF    03.5
02F5:  MOVF   3B,W
02F6:  BSF    03.5
02F7:  MOVWF  2F
02F8:  BCF    03.5
02F9:  MOVF   3A,W
02FA:  BSF    03.5
02FB:  MOVWF  2E
02FC:  BCF    03.5
02FD:  MOVF   39,W
02FE:  BSF    03.5
02FF:  MOVWF  2D
0300:  BCF    03.5
0301:  MOVF   38,W
0302:  BSF    03.5
0303:  MOVWF  2C
0304:  BCF    03.5
0305:  CALL   06E
0306:  MOVF   77,W
0307:  BSF    03.5
0308:  MOVWF  20
0309:  MOVF   78,W
030A:  MOVWF  21
030B:  MOVF   79,W
030C:  MOVWF  22
030D:  MOVF   7A,W
030E:  MOVWF  23
030F:  BCF    03.1
0310:  MOVF   23,W
0311:  MOVWF  2B
0312:  MOVF   22,W
0313:  MOVWF  2A
0314:  MOVF   21,W
0315:  MOVWF  29
0316:  MOVF   20,W
0317:  MOVWF  28
0318:  BCF    03.5
0319:  MOVF   3F,W
031A:  BSF    03.5
031B:  MOVWF  2F
031C:  BCF    03.5
031D:  MOVF   3E,W
031E:  BSF    03.5
031F:  MOVWF  2E
0320:  BCF    03.5
0321:  MOVF   3D,W
0322:  BSF    03.5
0323:  MOVWF  2D
0324:  BCF    03.5
0325:  MOVF   3C,W
0326:  BSF    03.5
0327:  MOVWF  2C
0328:  BCF    03.5
0329:  CALL   06E
032A:  MOVF   77,W
032B:  BSF    03.5
032C:  MOVWF  24
032D:  MOVF   78,W
032E:  MOVWF  25
032F:  MOVF   79,W
0330:  MOVWF  26
0331:  MOVF   7A,W
0332:  MOVWF  27
0333:  BCF    03.1
0334:  MOVF   27,W
0335:  MOVWF  2B
0336:  MOVF   26,W
0337:  MOVWF  2A
0338:  MOVF   25,W
0339:  MOVWF  29
033A:  MOVF   24,W
033B:  MOVWF  28
033C:  BCF    03.5
033D:  MOVF   43,W
033E:  BSF    03.5
033F:  MOVWF  2F
0340:  BCF    03.5
0341:  MOVF   42,W
0342:  BSF    03.5
0343:  MOVWF  2E
0344:  BCF    03.5
0345:  MOVF   41,W
0346:  BSF    03.5
0347:  MOVWF  2D
0348:  BCF    03.5
0349:  MOVF   40,W
034A:  BSF    03.5
034B:  MOVWF  2C
034C:  BCF    03.5
034D:  CALL   06E
034E:  MOVF   77,W
034F:  BSF    03.5
0350:  MOVWF  28
0351:  MOVF   78,W
0352:  MOVWF  29
0353:  MOVF   79,W
0354:  MOVWF  2A
0355:  MOVF   7A,W
0356:  MOVWF  2B
0357:  MOVWF  2F
0358:  MOVF   2A,W
0359:  MOVWF  2E
035A:  MOVF   29,W
035B:  MOVWF  2D
035C:  MOVF   28,W
035D:  MOVWF  2C
035E:  CLRF   33
035F:  CLRF   32
0360:  CLRF   31
0361:  MOVLW  81
0362:  MOVWF  30
0363:  BCF    03.5
0364:  CALL   1B4
0365:  MOVF   7A,W
0366:  MOVWF  33
0367:  MOVF   79,W
0368:  MOVWF  32
0369:  MOVF   78,W
036A:  MOVWF  31
036B:  MOVF   77,W
036C:  MOVWF  30
.................... } 
....................  
....................   
....................     if(val==1){ 
036D:  BTFSS  45.0
036E:  GOTO   374
....................    output_high(pin_a0); 
036F:  BSF    03.5
0370:  BCF    05.0
0371:  BCF    03.5
0372:  BSF    05.0
....................  
....................    }else{ 
0373:  GOTO   378
....................    output_low(pin_a0); 
0374:  BSF    03.5
0375:  BCF    05.0
0376:  BCF    03.5
0377:  BCF    05.0
....................    } 
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
0378:  BCF    0B.2
0379:  BCF    0A.3
037A:  GOTO   020
.................... void main(){ 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  MOVLW  62
0805:  BSF    03.5
0806:  MOVWF  0F
0807:  MOVF   0F,W
0808:  BCF    1F.4
0809:  BCF    1F.5
080A:  MOVF   1B,W
080B:  ANDLW  80
080C:  MOVWF  1B
080D:  MOVLW  07
080E:  MOVWF  1C
.................... float y,rtdv,rtdr,LSB; 
.................... setup_comparator(NC_NC_NC_NC); 
*
0812:  MOVLW  07
0813:  BSF    03.5
0814:  MOVWF  1C
0815:  MOVF   05,W
0816:  MOVWF  05
0817:  MOVLW  03
0818:  MOVWF  77
0819:  DECFSZ 77,F
081A:  GOTO   019
081B:  MOVF   1C,W
081C:  BCF    03.5
081D:  BCF    0D.6
.................... setup_vref(FALSE); 
081E:  BSF    03.5
081F:  CLRF   1D
....................    setup_wdt(WDT_OFF); 
0820:  BCF    03.5
0821:  BSF    03.6
0822:  BCF    05.0
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_128); 
0823:  BSF    03.5
0824:  BCF    03.6
0825:  MOVF   01,W
0826:  ANDLW  C0
0827:  IORLW  06
0828:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0829:  BCF    03.5
082A:  CLRF   10
....................    setup_timer_2(T2_DIV_BY_16, 25, 3); 
082B:  MOVLW  10
082C:  MOVWF  78
082D:  IORLW  06
082E:  MOVWF  12
082F:  MOVLW  19
0830:  BSF    03.5
0831:  MOVWF  12
....................    setup_ccp1(CCP_PWM);  
0832:  BCF    06.0
0833:  BCF    03.5
0834:  BCF    06.0
0835:  MOVLW  0C
0836:  MOVWF  17
....................    enable_interrupts(INT_TIMER0); 
0837:  BSF    0B.5
....................    enable_interrupts(global); 
0838:  MOVLW  C0
0839:  IORWF  0B,F
.................... set_tris_A(0x10); 
083A:  MOVLW  10
083B:  BSF    03.5
083C:  MOVWF  05
.................... set_tris_b(0x08); 
083D:  MOVLW  08
083E:  MOVWF  06
.................... setup_adc_ports(sAN4|VSS_VDD); 
083F:  BCF    1F.4
0840:  BCF    1F.5
0841:  MOVF   1B,W
0842:  ANDLW  80
0843:  IORLW  10
0844:  MOVWF  1B
.................... setup_adc(ADC_CLOCK_INTERNAL); 
0845:  BCF    1F.6
0846:  BCF    03.5
0847:  BSF    1F.6
0848:  BSF    1F.7
0849:  BSF    03.5
084A:  BSF    1F.7
084B:  BCF    03.5
084C:  BSF    1F.0
.................... set_adc_channel(4); 
084D:  MOVLW  20
084E:  MOVWF  78
084F:  MOVF   1F,W
0850:  ANDLW  C7
0851:  IORWF  78,W
0852:  MOVWF  1F
.................... valor=read_adc(); 
0853:  BSF    1F.2
0854:  BTFSC  1F.2
0855:  GOTO   054
0856:  BSF    03.5
0857:  MOVF   1E,W
0858:  BCF    03.5
0859:  MOVWF  2A
085A:  MOVF   1E,W
085B:  MOVWF  2B
085C:  CLRF   29
085D:  BTFSC  0B.7
085E:  BSF    29.7
085F:  BCF    0B.7
.................... delay_ms(30); 
0860:  MOVLW  1E
0861:  MOVWF  74
0862:  BCF    0A.3
0863:  CALL   059
0864:  BSF    0A.3
0865:  BTFSC  29.7
0866:  BSF    0B.7
.................... lcd_init();                      //Inicializamos el LCD. 
0867:  BCF    0A.3
0868:  GOTO   3CB
0869:  BSF    0A.3
.................... lcd_putc("\fTemp. =");      // 
086A:  CLRF   56
086B:  MOVF   56,W
086C:  BCF    0A.3
086D:  CALL   03D
086E:  BSF    0A.3
086F:  IORLW  00
0870:  BTFSC  03.2
0871:  GOTO   078
0872:  INCF   56,F
0873:  MOVWF  64
0874:  BCF    0A.3
0875:  CALL   41D
0876:  BSF    0A.3
0877:  GOTO   06B
.................... LSB=5/1024.0;  
0878:  CLRF   55
0879:  CLRF   54
087A:  MOVLW  20
087B:  MOVWF  53
087C:  MOVLW  77
087D:  MOVWF  52
.................... while(1){ 
.................... set_pwm1_duty (200); 
087E:  MOVLW  C8
087F:  MOVWF  15
.................... rtdv=(valor*LSB)/48.40;                    /* Calculate volt rtdr  */ 
0880:  MOVF   2B,W
0881:  MOVWF  57
0882:  MOVF   2A,W
0883:  MOVWF  56
0884:  BCF    0A.3
0885:  GOTO   448
0886:  BSF    0A.3
0887:  MOVF   7A,W
0888:  MOVWF  67
0889:  MOVF   79,W
088A:  MOVWF  66
088B:  MOVF   78,W
088C:  MOVWF  65
088D:  MOVF   77,W
088E:  MOVWF  64
088F:  MOVF   55,W
0890:  MOVWF  6B
0891:  MOVF   54,W
0892:  MOVWF  6A
0893:  MOVF   53,W
0894:  MOVWF  69
0895:  MOVF   52,W
0896:  MOVWF  68
0897:  BCF    0A.3
0898:  CALL   466
0899:  BSF    0A.3
089A:  MOVF   77,W
089B:  MOVWF  56
089C:  MOVF   78,W
089D:  MOVWF  57
089E:  MOVF   79,W
089F:  MOVWF  58
08A0:  MOVF   7A,W
08A1:  MOVWF  59
08A2:  CLRF   29
08A3:  BTFSC  0B.7
08A4:  BSF    29.7
08A5:  BCF    0B.7
08A6:  MOVF   59,W
08A7:  BSF    03.5
08A8:  MOVWF  2F
08A9:  BCF    03.5
08AA:  MOVF   58,W
08AB:  BSF    03.5
08AC:  MOVWF  2E
08AD:  BCF    03.5
08AE:  MOVF   57,W
08AF:  BSF    03.5
08B0:  MOVWF  2D
08B1:  BCF    03.5
08B2:  MOVF   56,W
08B3:  BSF    03.5
08B4:  MOVWF  2C
08B5:  MOVLW  9A
08B6:  MOVWF  33
08B7:  MOVLW  99
08B8:  MOVWF  32
08B9:  MOVLW  41
08BA:  MOVWF  31
08BB:  MOVLW  84
08BC:  MOVWF  30
08BD:  BCF    0A.3
08BE:  BCF    03.5
08BF:  CALL   1B4
08C0:  BSF    0A.3
08C1:  BTFSC  29.7
08C2:  BSF    0B.7
08C3:  MOVF   7A,W
08C4:  MOVWF  4D
08C5:  MOVF   79,W
08C6:  MOVWF  4C
08C7:  MOVF   78,W
08C8:  MOVWF  4B
08C9:  MOVF   77,W
08CA:  MOVWF  4A
.................... rtdr = (rtdv*10000.0)/(5.0-rtdv);          /* Calculate RTD resistance rtdr  */  
08CB:  MOVF   4D,W
08CC:  MOVWF  67
08CD:  MOVF   4C,W
08CE:  MOVWF  66
08CF:  MOVF   4B,W
08D0:  MOVWF  65
08D1:  MOVF   4A,W
08D2:  MOVWF  64
08D3:  CLRF   6B
08D4:  MOVLW  40
08D5:  MOVWF  6A
08D6:  MOVLW  1C
08D7:  MOVWF  69
08D8:  MOVLW  8C
08D9:  MOVWF  68
08DA:  BCF    0A.3
08DB:  CALL   466
08DC:  BSF    0A.3
08DD:  MOVF   77,W
08DE:  MOVWF  56
08DF:  MOVF   78,W
08E0:  MOVWF  57
08E1:  MOVF   79,W
08E2:  MOVWF  58
08E3:  MOVF   7A,W
08E4:  MOVWF  59
08E5:  BSF    03.1
08E6:  CLRF   29
08E7:  BTFSC  0B.7
08E8:  BSF    29.7
08E9:  BCF    0B.7
08EA:  BSF    03.5
08EB:  CLRF   2B
08EC:  CLRF   2A
08ED:  MOVLW  20
08EE:  MOVWF  29
08EF:  MOVLW  81
08F0:  MOVWF  28
08F1:  BCF    03.5
08F2:  MOVF   4D,W
08F3:  BSF    03.5
08F4:  MOVWF  2F
08F5:  BCF    03.5
08F6:  MOVF   4C,W
08F7:  BSF    03.5
08F8:  MOVWF  2E
08F9:  BCF    03.5
08FA:  MOVF   4B,W
08FB:  BSF    03.5
08FC:  MOVWF  2D
08FD:  BCF    03.5
08FE:  MOVF   4A,W
08FF:  BSF    03.5
0900:  MOVWF  2C
0901:  BCF    0A.3
0902:  BCF    03.5
0903:  CALL   06E
0904:  BSF    0A.3
0905:  BTFSC  29.7
0906:  BSF    0B.7
0907:  CLRF   29
0908:  BTFSC  0B.7
0909:  BSF    29.7
090A:  BCF    0B.7
090B:  MOVF   59,W
090C:  BSF    03.5
090D:  MOVWF  2F
090E:  BCF    03.5
090F:  MOVF   58,W
0910:  BSF    03.5
0911:  MOVWF  2E
0912:  BCF    03.5
0913:  MOVF   57,W
0914:  BSF    03.5
0915:  MOVWF  2D
0916:  BCF    03.5
0917:  MOVF   56,W
0918:  BSF    03.5
0919:  MOVWF  2C
091A:  MOVF   7A,W
091B:  MOVWF  33
091C:  MOVF   79,W
091D:  MOVWF  32
091E:  MOVF   78,W
091F:  MOVWF  31
0920:  MOVF   77,W
0921:  MOVWF  30
0922:  BCF    0A.3
0923:  BCF    03.5
0924:  CALL   1B4
0925:  BSF    0A.3
0926:  BTFSC  29.7
0927:  BSF    0B.7
0928:  MOVF   7A,W
0929:  MOVWF  51
092A:  MOVF   79,W
092B:  MOVWF  50
092C:  MOVF   78,W
092D:  MOVWF  4F
092E:  MOVF   77,W
092F:  MOVWF  4E
.................... y = (0.15274) - ((rtdr-100.0)*(2310.0e-7));  
0930:  BSF    03.1
0931:  CLRF   29
0932:  BTFSC  0B.7
0933:  BSF    29.7
0934:  BCF    0B.7
0935:  MOVF   51,W
0936:  BSF    03.5
0937:  MOVWF  2B
0938:  BCF    03.5
0939:  MOVF   50,W
093A:  BSF    03.5
093B:  MOVWF  2A
093C:  BCF    03.5
093D:  MOVF   4F,W
093E:  BSF    03.5
093F:  MOVWF  29
0940:  BCF    03.5
0941:  MOVF   4E,W
0942:  BSF    03.5
0943:  MOVWF  28
0944:  CLRF   2F
0945:  CLRF   2E
0946:  MOVLW  48
0947:  MOVWF  2D
0948:  MOVLW  85
0949:  MOVWF  2C
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   06E
094D:  BSF    0A.3
094E:  BTFSC  29.7
094F:  BSF    0B.7
0950:  MOVF   77,W
0951:  MOVWF  56
0952:  MOVF   78,W
0953:  MOVWF  57
0954:  MOVF   79,W
0955:  MOVWF  58
0956:  MOVF   7A,W
0957:  MOVWF  59
0958:  MOVWF  67
0959:  MOVF   58,W
095A:  MOVWF  66
095B:  MOVF   57,W
095C:  MOVWF  65
095D:  MOVF   56,W
095E:  MOVWF  64
095F:  MOVLW  97
0960:  MOVWF  6B
0961:  MOVLW  38
0962:  MOVWF  6A
0963:  MOVLW  72
0964:  MOVWF  69
0965:  MOVWF  68
0966:  BCF    0A.3
0967:  CALL   466
0968:  BSF    0A.3
0969:  BSF    03.1
096A:  CLRF   29
096B:  BTFSC  0B.7
096C:  BSF    29.7
096D:  BCF    0B.7
096E:  MOVLW  E0
096F:  BSF    03.5
0970:  MOVWF  2B
0971:  MOVLW  67
0972:  MOVWF  2A
0973:  MOVLW  1C
0974:  MOVWF  29
0975:  MOVLW  7C
0976:  MOVWF  28
0977:  MOVF   7A,W
0978:  MOVWF  2F
0979:  MOVF   79,W
097A:  MOVWF  2E
097B:  MOVF   78,W
097C:  MOVWF  2D
097D:  MOVF   77,W
097E:  MOVWF  2C
097F:  BCF    0A.3
0980:  BCF    03.5
0981:  CALL   06E
0982:  BSF    0A.3
0983:  BTFSC  29.7
0984:  BSF    0B.7
0985:  MOVF   7A,W
0986:  MOVWF  49
0987:  MOVF   79,W
0988:  MOVWF  48
0989:  MOVF   78,W
098A:  MOVWF  47
098B:  MOVF   77,W
098C:  MOVWF  46
.................... y = sqrt(y) ; 
098D:  MOVF   49,W
098E:  MOVWF  59
098F:  MOVF   48,W
0990:  MOVWF  58
0991:  MOVF   47,W
0992:  MOVWF  57
0993:  MOVF   46,W
0994:  MOVWF  56
0995:  BCF    0A.3
0996:  GOTO   51A
0997:  BSF    0A.3
0998:  MOVF   7A,W
0999:  MOVWF  49
099A:  MOVF   79,W
099B:  MOVWF  48
099C:  MOVF   78,W
099D:  MOVWF  47
099E:  MOVF   77,W
099F:  MOVWF  46
.................... temp = (y-0.39083)/(-0.0001155); 
09A0:  BSF    03.1
09A1:  CLRF   29
09A2:  BTFSC  0B.7
09A3:  BSF    29.7
09A4:  BCF    0B.7
09A5:  MOVF   49,W
09A6:  BSF    03.5
09A7:  MOVWF  2B
09A8:  BCF    03.5
09A9:  MOVF   48,W
09AA:  BSF    03.5
09AB:  MOVWF  2A
09AC:  BCF    03.5
09AD:  MOVF   47,W
09AE:  BSF    03.5
09AF:  MOVWF  29
09B0:  BCF    03.5
09B1:  MOVF   46,W
09B2:  BSF    03.5
09B3:  MOVWF  28
09B4:  MOVLW  DF
09B5:  MOVWF  2F
09B6:  MOVLW  1A
09B7:  MOVWF  2E
09B8:  MOVLW  48
09B9:  MOVWF  2D
09BA:  MOVLW  7D
09BB:  MOVWF  2C
09BC:  BCF    0A.3
09BD:  BCF    03.5
09BE:  CALL   06E
09BF:  BSF    0A.3
09C0:  BTFSC  29.7
09C1:  BSF    0B.7
09C2:  MOVF   77,W
09C3:  MOVWF  56
09C4:  MOVF   78,W
09C5:  MOVWF  57
09C6:  MOVF   79,W
09C7:  MOVWF  58
09C8:  MOVF   7A,W
09C9:  MOVWF  59
09CA:  CLRF   29
09CB:  BTFSC  0B.7
09CC:  BSF    29.7
09CD:  BCF    0B.7
09CE:  MOVF   59,W
09CF:  BSF    03.5
09D0:  MOVWF  2F
09D1:  BCF    03.5
09D2:  MOVF   58,W
09D3:  BSF    03.5
09D4:  MOVWF  2E
09D5:  BCF    03.5
09D6:  MOVF   57,W
09D7:  BSF    03.5
09D8:  MOVWF  2D
09D9:  BCF    03.5
09DA:  MOVF   56,W
09DB:  BSF    03.5
09DC:  MOVWF  2C
09DD:  MOVLW  97
09DE:  MOVWF  33
09DF:  MOVLW  38
09E0:  MOVWF  32
09E1:  MOVLW  F2
09E2:  MOVWF  31
09E3:  MOVLW  71
09E4:  MOVWF  30
09E5:  BCF    0A.3
09E6:  BCF    03.5
09E7:  CALL   1B4
09E8:  BSF    0A.3
09E9:  BTFSC  29.7
09EA:  BSF    0B.7
09EB:  MOVF   7A,W
09EC:  MOVWF  2F
09ED:  MOVF   79,W
09EE:  MOVWF  2E
09EF:  MOVF   78,W
09F0:  MOVWF  2D
09F1:  MOVF   77,W
09F2:  MOVWF  2C
.................... lcd_gotoxy(10,1); 
09F3:  MOVLW  0A
09F4:  MOVWF  65
09F5:  MOVLW  01
09F6:  MOVWF  66
09F7:  BCF    0A.3
09F8:  CALL   40B
09F9:  BSF    0A.3
.................... printf(lcd_putc,"%4.2f",temp); 
09FA:  MOVLW  03
09FB:  MOVWF  04
09FC:  MOVF   2F,W
09FD:  MOVWF  5A
09FE:  MOVF   2E,W
09FF:  MOVWF  59
0A00:  MOVF   2D,W
0A01:  MOVWF  58
0A02:  MOVF   2C,W
0A03:  MOVWF  57
0A04:  MOVLW  02
0A05:  MOVWF  5B
0A06:  BCF    0A.3
0A07:  CALL   613
0A08:  BSF    0A.3
.................... delay_ms(300); 
0A09:  MOVLW  02
0A0A:  MOVWF  56
0A0B:  CLRF   29
0A0C:  BTFSC  0B.7
0A0D:  BSF    29.7
0A0E:  BCF    0B.7
0A0F:  MOVLW  96
0A10:  MOVWF  74
0A11:  BCF    0A.3
0A12:  CALL   059
0A13:  BSF    0A.3
0A14:  BTFSC  29.7
0A15:  BSF    0B.7
0A16:  DECFSZ 56,F
0A17:  GOTO   20B
.................... lcd_gotoxy(2,2); 
0A18:  MOVLW  02
0A19:  MOVWF  65
0A1A:  MOVWF  66
0A1B:  BCF    0A.3
0A1C:  CALL   40B
0A1D:  BSF    0A.3
.................... printf(lcd_putc,"TEMP %4.2f",temp1); 
0A1E:  CLRF   56
0A1F:  MOVF   56,W
0A20:  BCF    0A.3
0A21:  CALL   04A
0A22:  BSF    0A.3
0A23:  INCF   56,F
0A24:  MOVWF  77
0A25:  MOVWF  64
0A26:  BCF    0A.3
0A27:  CALL   41D
0A28:  BSF    0A.3
0A29:  MOVLW  05
0A2A:  SUBWF  56,W
0A2B:  BTFSS  03.2
0A2C:  GOTO   21F
0A2D:  MOVLW  03
0A2E:  MOVWF  04
0A2F:  MOVF   33,W
0A30:  MOVWF  5A
0A31:  MOVF   32,W
0A32:  MOVWF  59
0A33:  MOVF   31,W
0A34:  MOVWF  58
0A35:  MOVF   30,W
0A36:  MOVWF  57
0A37:  MOVLW  02
0A38:  MOVWF  5B
0A39:  BCF    0A.3
0A3A:  CALL   613
0A3B:  BSF    0A.3
0A3C:  CLRF   29
0A3D:  BTFSC  0B.7
0A3E:  BSF    29.7
0A3F:  BCF    0B.7
.................... delay_ms(200); 
0A40:  MOVLW  C8
0A41:  MOVWF  74
0A42:  BCF    0A.3
0A43:  CALL   059
0A44:  BSF    0A.3
0A45:  BTFSC  29.7
0A46:  BSF    0B.7
.................... } 
0A47:  GOTO   07E
.................... } 
0A48:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT MCLR NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT INTRC_IO
   Word  2: 3FFF   FCMEN IESO
